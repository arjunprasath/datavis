
00:00:00.000 --> 00:00:00.556
 

00:00:00.556 --> 00:00:01.180
BRAD GREEN: OK.

00:00:01.180 --> 00:00:02.590
Welcome everybody.

00:00:02.590 --> 00:00:05.900
Thanks for coming to the first
Angular conference or Angular

00:00:05.900 --> 00:00:09.580
Meetup here in
Mountain View in 2014.

00:00:09.580 --> 00:00:12.372
So we've got I think a really
good start of the year tonight.

00:00:12.372 --> 00:00:13.830
I've got a couple
of announcements,

00:00:13.830 --> 00:00:15.040
like I always do.

00:00:15.040 --> 00:00:17.480
Then Victor's going to come
up and talk about Angular D3,

00:00:17.480 --> 00:00:20.160
and Igor will finish
up with how will

00:00:20.160 --> 00:00:22.965
pull requests work
in the Angular world.

00:00:22.965 --> 00:00:25.580
 

00:00:25.580 --> 00:00:27.900
A couple of announcements
before we get going.

00:00:27.900 --> 00:00:32.150
Like always, if you plan to
talk, meaning ask a question,

00:00:32.150 --> 00:00:35.770
and we hope you do, you will
need to sign one of the forms

00:00:35.770 --> 00:00:37.890
that Igor has right back there.

00:00:37.890 --> 00:00:40.630
And I think we give you a
T-shirt if you do such a thing.

00:00:40.630 --> 00:00:42.045
Is that still true?

00:00:42.045 --> 00:00:42.545
Yeah.

00:00:42.545 --> 00:00:43.045
OK.

00:00:43.045 --> 00:00:44.170
I think that's still true.

00:00:44.170 --> 00:00:46.690
No pandering questions,
just real questions.

00:00:46.690 --> 00:00:48.850
And I think that's it.

00:00:48.850 --> 00:00:50.920
With that, we'll get started.

00:00:50.920 --> 00:00:55.240
So, not a lot of things
happened in the world of Angular

00:00:55.240 --> 00:00:59.520
in 2014, except we got a
lot of releases out somehow.

00:00:59.520 --> 00:01:02.961
Apparently, we don't
observe holidays.

00:01:02.961 --> 00:01:05.160
I think we've never gotten
so many releases out

00:01:05.160 --> 00:01:08.190
as we did between last
Meetup and this one.

00:01:08.190 --> 00:01:11.060
There's a couple of highlights
in these four releases.

00:01:11.060 --> 00:01:13.670
There was 114 pull
requests closed.

00:01:13.670 --> 00:01:15.470
A couple features
got in, like we

00:01:15.470 --> 00:01:17.820
have multi-line NG options now.

00:01:17.820 --> 00:01:21.420
There's one jqLite feature
for element dot one.

00:01:21.420 --> 00:01:25.650
A ton of performance things
went in for injector, resource,

00:01:25.650 --> 00:01:28.710
compile, parse,
broadcast, even in jqLite,

00:01:28.710 --> 00:01:30.080
some things got faster.

00:01:30.080 --> 00:01:33.380
And then a ton of bug fixes.

00:01:33.380 --> 00:01:35.830
A lot of things around
IE8, a whole bunch

00:01:35.830 --> 00:01:40.630
of stuff in the animation bits,
and across the rest of Angular.

00:01:40.630 --> 00:01:43.161
In the world of Angular Dart,
we got out two releases.

00:01:43.161 --> 00:01:44.660
If you haven't been
following along,

00:01:44.660 --> 00:01:47.370
Angular Dart are the ports
to the Dart language.

00:01:47.370 --> 00:01:49.630
And it's kind of
just getting started.

00:01:49.630 --> 00:01:51.680
We're working towards
the 1.0 release.

00:01:51.680 --> 00:01:55.010
Some of the things that we
added are getting parity

00:01:55.010 --> 00:01:56.867
with Angular JS side.

00:01:56.867 --> 00:01:58.700
So we're still adding
a bunch of directives.

00:01:58.700 --> 00:02:00.710
There's new things
that got added there.

00:02:00.710 --> 00:02:04.860
A lot of performance
improvements to make it

00:02:04.860 --> 00:02:06.100
perform very well on Dart.

00:02:06.100 --> 00:02:08.580
This is still a bit
of a new place for us.

00:02:08.580 --> 00:02:13.620
And then we have some
experimental supports

00:02:13.620 --> 00:02:15.480
for this thing called
shallow-repeat.

00:02:15.480 --> 00:02:18.440
 

00:02:18.440 --> 00:02:20.780
One other announcement
I'd like to make

00:02:20.780 --> 00:02:23.290
is that we have a conference
going on in two days.

00:02:23.290 --> 00:02:25.920
On the 16th we start
in Salt Lake City.

00:02:25.920 --> 00:02:27.960
Anybody coming there with us?

00:02:27.960 --> 00:02:29.290
A couple-- Just us.

00:02:29.290 --> 00:02:29.790
OK.

00:02:29.790 --> 00:02:30.340
Yes, one over here.

00:02:30.340 --> 00:02:30.840
Good.

00:02:30.840 --> 00:02:32.090
Great.

00:02:32.090 --> 00:02:34.122
So this is for everybody
who's not coming.

00:02:34.122 --> 00:02:35.830
We're actually going
to be live streaming

00:02:35.830 --> 00:02:36.746
the entire conference.

00:02:36.746 --> 00:02:40.630
You can tune into it live
and you can watch me again,

00:02:40.630 --> 00:02:42.570
and some of the
other folks, talk

00:02:42.570 --> 00:02:45.560
about other interesting things
in the world of Angular.

00:02:45.560 --> 00:02:46.822
So please tune in.

00:02:46.822 --> 00:02:48.530
I think it starts at
9:00 in the morning,

00:02:48.530 --> 00:02:51.550
but that's maybe an hour
off in Salt Lake time.

00:02:51.550 --> 00:02:54.780
And I'll see you guys there.

00:02:54.780 --> 00:02:55.760
One other announcement.

00:02:55.760 --> 00:02:58.810
If you are interested
in Angular on Dart,

00:02:58.810 --> 00:03:00.922
the Dart team,
along with us, we're

00:03:00.922 --> 00:03:03.130
running this thing called
Flight School to get you up

00:03:03.130 --> 00:03:03.670
and running.

00:03:03.670 --> 00:03:05.378
So if you want to
learn the Dart language

00:03:05.378 --> 00:03:07.920
and learn about Angular
Dart on top of it.

00:03:07.920 --> 00:03:11.812
This is happening in many cities
around the world, and really

00:03:11.812 --> 00:03:12.520
around the world.

00:03:12.520 --> 00:03:14.580
If you just search for-- Sorry
I don't have a link for it.

00:03:14.580 --> 00:03:15.910
If you just search for
Dart Flight School,

00:03:15.910 --> 00:03:17.760
you'll find it as
the first result.

00:03:17.760 --> 00:03:23.660
And from Shanghai to Chicago
you can find a local place

00:03:23.660 --> 00:03:28.200
where you can come tune
in and learn Angular Dart.

00:03:28.200 --> 00:03:31.137
That's it for this
month's announcements.

00:03:31.137 --> 00:03:33.220
We'll have Victor come up
and talk to us about D3.

00:03:33.220 --> 00:03:40.895
 

00:03:40.895 --> 00:03:42.020
VICTOR POWELL: Thanks Brad.

00:03:42.020 --> 00:03:45.354
 

00:03:45.354 --> 00:03:46.020
Can you hear me?

00:03:46.020 --> 00:04:11.897
 

00:04:11.897 --> 00:04:13.230
You're not supposed to see that.

00:04:13.230 --> 00:04:29.260
 

00:04:29.260 --> 00:04:37.440
So I'm a freelance data
visualization engineer,

00:04:37.440 --> 00:04:39.110
and I'm giving a
talk, if you couldn't

00:04:39.110 --> 00:04:42.490
tell by the slides, a
talk on visualizing data

00:04:42.490 --> 00:04:43.390
with Angular and D3.

00:04:43.390 --> 00:04:48.620
 

00:04:48.620 --> 00:04:51.362
Also, all the slides are going
to be online after the talk,

00:04:51.362 --> 00:04:53.070
so we'll pack out the
link on the Meetup,

00:04:53.070 --> 00:04:55.660
so you shouldn't have to worry
about taking notes furiously.

00:04:55.660 --> 00:04:57.118
We're going to be
going over a lot.

00:04:57.118 --> 00:05:00.900
This is sort of the
combination of D3 and Angular.

00:05:00.900 --> 00:05:04.190
So don't worry about that.

00:05:04.190 --> 00:05:07.870
But before I begin, could I
just get a quick show of hands.

00:05:07.870 --> 00:05:10.849
Who's in some way at all
familiar with Angular?

00:05:10.849 --> 00:05:12.140
And don't be shy if you're not.

00:05:12.140 --> 00:05:14.560
It's totally fine, because
this is the cross-pollination

00:05:14.560 --> 00:05:16.239
of Meetups from the
E3 [INAUDIBLE] area.

00:05:16.239 --> 00:05:17.530
OK, keep your hands up, though.

00:05:17.530 --> 00:05:18.470
Keep your hands up.

00:05:18.470 --> 00:05:20.303
Now, anyone that doesn't
have their hand up,

00:05:20.303 --> 00:05:22.840
look at the person that does
have their hand up and talk

00:05:22.840 --> 00:05:24.940
to them.

00:05:24.940 --> 00:05:26.240
But it's a good turnout.

00:05:26.240 --> 00:05:28.510
Nice hand raising for
a D-- Not surprising

00:05:28.510 --> 00:05:30.680
for an Angular Meetup.

00:05:30.680 --> 00:05:33.380
Now anyone that has
some familiarity with D3

00:05:33.380 --> 00:05:36.130
go ahead and raise your hand.

00:05:36.130 --> 00:05:36.630
Cool.

00:05:36.630 --> 00:05:38.850
Now, if you're not familiar
with D3, that's fine.

00:05:38.850 --> 00:05:41.400
Find someone who is and talk
to them, shake their hand,

00:05:41.400 --> 00:05:42.490
say hello.

00:05:42.490 --> 00:05:45.344
OK, now we're going
to get into the talk.

00:05:45.344 --> 00:05:47.760
So little about me, because I
think it's important for you

00:05:47.760 --> 00:05:51.010
to know a little bit about who
I am so you'll pay attention.

00:05:51.010 --> 00:05:53.540
You'll know why to listen
in the first place.

00:05:53.540 --> 00:05:56.100
I visualize data, obviously.

00:05:56.100 --> 00:05:59.520
As a freelance developer,
I've most recently

00:05:59.520 --> 00:06:01.520
worked with a company
called Monsoon

00:06:01.520 --> 00:06:05.270
to help them build a dashboard
for Hewlett Packard that

00:06:05.270 --> 00:06:08.090
helps them analyze
their data center energy

00:06:08.090 --> 00:06:13.350
consumption across all
of their data centers.

00:06:13.350 --> 00:06:17.030
I teach at a hacker
school in San Francisco

00:06:17.030 --> 00:06:19.030
called Hack Reactor.

00:06:19.030 --> 00:06:24.320
We actually have a few students
here today-- former students,

00:06:24.320 --> 00:06:25.640
not current students.

00:06:25.640 --> 00:06:26.640
Some of those, actually.

00:06:26.640 --> 00:06:27.290
OK.

00:06:27.290 --> 00:06:30.120
So I also really like
to explain things.

00:06:30.120 --> 00:06:32.470
This is a visualization
of the central limit

00:06:32.470 --> 00:06:37.290
theorem I did a while back.

00:06:37.290 --> 00:06:40.780
Here's also an explanation
of the Monte Hall problem.

00:06:40.780 --> 00:06:43.840
If you're not familiar, you
should Google it and find

00:06:43.840 --> 00:06:46.730
this explanation, and
it'll tell you what it is

00:06:46.730 --> 00:06:47.940
and why it's interesting.

00:06:47.940 --> 00:06:50.520
Also, the Simpson's
paradox, which

00:06:50.520 --> 00:06:52.777
is a really interesting
statistical anomaly--

00:06:52.777 --> 00:06:55.110
I'm not going to get too much
into details because it'll

00:06:55.110 --> 00:06:57.790
probably just confuse
you, but if you read this,

00:06:57.790 --> 00:07:01.430
hopefully you won't
be confused anymore.

00:07:01.430 --> 00:07:04.284
I'm sorry.

00:07:04.284 --> 00:07:05.700
A lot of these
data visualizations

00:07:05.700 --> 00:07:11.560
I've also done with my good
friend Lewis-- he's here today.

00:07:11.560 --> 00:07:18.030
Lewis Lehe, or Le-- you
don't pronounce the H-E.

00:07:18.030 --> 00:07:23.120
I'm also writing a book
with Ari Lerner, who

00:07:23.120 --> 00:07:29.360
is in charge of ng-newsletter,
or puts together ng-newsletter.

00:07:29.360 --> 00:07:31.810
And he's also written
the book, the ng-book.

00:07:31.810 --> 00:07:34.143
This book is still in
a peer release state,

00:07:34.143 --> 00:07:36.710
so it's not done completely,
but if you buy it now

00:07:36.710 --> 00:07:38.690
you'll get a discount
over the release price.

00:07:38.690 --> 00:07:43.560
 

00:07:43.560 --> 00:07:46.880
And if you need help
understanding your data,

00:07:46.880 --> 00:07:49.800
send me an email and
maybe I can help,

00:07:49.800 --> 00:07:54.570
or the duo combination
of me and Lewis.

00:07:54.570 --> 00:07:56.586
So no more ads.

00:07:56.586 --> 00:07:58.210
Let's start to get
into the good parts.

00:07:58.210 --> 00:08:01.320
 

00:08:01.320 --> 00:08:03.140
So just to give you
a high level view,

00:08:03.140 --> 00:08:07.210
this talk's going to be on why
and how you should use Angular

00:08:07.210 --> 00:08:08.805
and D3 for doing
data visualizations.

00:08:08.805 --> 00:08:14.939
 

00:08:14.939 --> 00:08:16.855
Before we do that, though,
let's talk a little

00:08:16.855 --> 00:08:18.355
about why you should
care about data

00:08:18.355 --> 00:08:20.260
visualization in
the first place.

00:08:20.260 --> 00:08:22.285
And to do that, I'd
like to show you

00:08:22.285 --> 00:08:26.980
one of my most favorite
examples, Anscombe's quartet.

00:08:26.980 --> 00:08:30.940
This is a series of four
data sets with x and y values

00:08:30.940 --> 00:08:32.679
for each.

00:08:32.679 --> 00:08:36.470
As a table it's kind of
hard to understand, so maybe

00:08:36.470 --> 00:08:40.169
as a good idea, let's look
at the summary statistics

00:08:40.169 --> 00:08:41.317
of that data set.

00:08:41.317 --> 00:08:43.150
But when we do that,
unfortunately, they all

00:08:43.150 --> 00:08:45.915
happen to have exactly the
same summary statistics.

00:08:45.915 --> 00:08:46.790
How is that possible?

00:08:46.790 --> 00:08:48.810
That's so frustrating.

00:08:48.810 --> 00:08:52.315
The mean of x and variance
of x, the mean of y,

00:08:52.315 --> 00:08:55.330
the variance of y,
correlation of x and y,

00:08:55.330 --> 00:08:57.894
and the linear regression
is exactly the same.

00:08:57.894 --> 00:08:59.810
And if we just look at
the summary statistics,

00:08:59.810 --> 00:09:02.310
that's very confusing,
because all the data

00:09:02.310 --> 00:09:04.000
seem somewhat different.

00:09:04.000 --> 00:09:06.170
But it becomes
immediately apparent

00:09:06.170 --> 00:09:08.610
when we visualize the data,
and we can see clearly

00:09:08.610 --> 00:09:11.649
that the data sets represent
completely different behavior.

00:09:11.649 --> 00:09:17.140
 

00:09:17.140 --> 00:09:20.140
So, OK, we understand why data
visualization is important,

00:09:20.140 --> 00:09:22.940
but why use Angular for
doing data visualization?

00:09:22.940 --> 00:09:26.030
 

00:09:26.030 --> 00:09:29.310
Chief among them
all are directives.

00:09:29.310 --> 00:09:31.230
For those not familiar
with directives,

00:09:31.230 --> 00:09:33.445
give us essentially
custom HTML tags.

00:09:33.445 --> 00:09:38.025
 

00:09:38.025 --> 00:09:39.400
It also allows
our visualizations

00:09:39.400 --> 00:09:41.290
to stay modular
and self-contained

00:09:41.290 --> 00:09:43.350
so that we can pick
them up and drop them

00:09:43.350 --> 00:09:47.960
in to some other
application fairly easily.

00:09:47.960 --> 00:09:52.432
But there's more reasons
than just directives

00:09:52.432 --> 00:09:53.640
for doing data visualization.

00:09:53.640 --> 00:09:56.880
Some of those we'll get
into, but for the most part

00:09:56.880 --> 00:09:57.955
it's directives.

00:09:57.955 --> 00:10:01.070
 

00:10:01.070 --> 00:10:04.240
I like to think of
directives as input fields.

00:10:04.240 --> 00:10:07.480
They're kind of like directives
that the browser gives us

00:10:07.480 --> 00:10:08.520
automatically.

00:10:08.520 --> 00:10:12.040
They're not actual directives
in an Angular sense.

00:10:12.040 --> 00:10:16.870
But they are like directives
in that they encapsulate

00:10:16.870 --> 00:10:19.500
a lot of behavior and
we're given a simple API

00:10:19.500 --> 00:10:21.090
to plug into them.

00:10:21.090 --> 00:10:25.230
So the one example right
here is the range input.

00:10:25.230 --> 00:10:27.930
And I specify the min
and the maximum value,

00:10:27.930 --> 00:10:29.720
and then the current value.

00:10:29.720 --> 00:10:32.540
And then it, the
browser, handles

00:10:32.540 --> 00:10:36.007
creating the slider,
and the knob,

00:10:36.007 --> 00:10:37.590
and watching for
changes to that knob,

00:10:37.590 --> 00:10:39.520
and updating the value for me.

00:10:39.520 --> 00:10:41.950
I don't have to worry about
the internals of that slider.

00:10:41.950 --> 00:10:45.680
It's just an input range.

00:10:45.680 --> 00:10:48.450
Same thing for the
date input field.

00:10:48.450 --> 00:10:51.880
There's really a lot of
complex user interaction

00:10:51.880 --> 00:10:53.690
here that the browser
gives us for free,

00:10:53.690 --> 00:10:57.160
but it abstracts away all
those concerns for us.

00:10:57.160 --> 00:11:00.764
 

00:11:00.764 --> 00:11:02.930
Well, wouldn't it be nice
if we could have something

00:11:02.930 --> 00:11:05.749
like a donut chart
element, and then we

00:11:05.749 --> 00:11:07.540
wouldn't have to worry
about the internals.

00:11:07.540 --> 00:11:09.039
We could just plug
our data into it,

00:11:09.039 --> 00:11:12.460
and not have to, after
having created our element,

00:11:12.460 --> 00:11:17.050
not have to worry about how
it does all that it does.

00:11:17.050 --> 00:11:18.550
Well, directives
make this possible.

00:11:18.550 --> 00:11:23.030
 

00:11:23.030 --> 00:11:26.540
Beyond directives, some of
the other interesting features

00:11:26.540 --> 00:11:29.760
that Angular gives us when
we have our visualizations

00:11:29.760 --> 00:11:33.610
and directives are
things like ng-switch

00:11:33.610 --> 00:11:35.910
for conditional templating.

00:11:35.910 --> 00:11:38.720
So let's say, for example,
based on some criteria,

00:11:38.720 --> 00:11:41.496
we would like a pie chart to
be displayed with our data,

00:11:41.496 --> 00:11:42.870
but maybe in some
other condition

00:11:42.870 --> 00:11:44.620
we'd like a bar chart
to be there instead.

00:11:44.620 --> 00:11:47.200
 

00:11:47.200 --> 00:11:51.430
Another really great feature of
Angular that blends well, that

00:11:51.430 --> 00:11:55.040
makes data visualization
a lot easier is ng-repeat.

00:11:55.040 --> 00:11:58.430
 

00:11:58.430 --> 00:12:03.800
Small multiples is this idea,
a powerful data visualization

00:12:03.800 --> 00:12:07.310
tool, originally
popularized by Edward Tufte,

00:12:07.310 --> 00:12:09.220
and it facilitates
the comparisons

00:12:09.220 --> 00:12:13.490
of change across multiple
charts side by side.

00:12:13.490 --> 00:12:17.480
So this is a classic
example of-- I'm

00:12:17.480 --> 00:12:22.540
sorry-- of small multiples
by Eadweard Muybridge,

00:12:22.540 --> 00:12:25.137
and it's called a
Horse in Motion.

00:12:25.137 --> 00:12:26.970
You might be wondering,
though, why can't we

00:12:26.970 --> 00:12:28.457
just use animation?

00:12:28.457 --> 00:12:30.540
Why can't we just play a
video of a horse running?

00:12:30.540 --> 00:12:34.030
Wouldn't that convey
all the information?

00:12:34.030 --> 00:12:38.230
Well, it turns out--
I'm sorry, here's

00:12:38.230 --> 00:12:40.590
a little graphic
I forgot to show.

00:12:40.590 --> 00:12:42.700
Why can't we just have this?

00:12:42.700 --> 00:12:44.620
Well, there's a few
limitations to this video.

00:12:44.620 --> 00:12:46.240
For one, we're
stuck in the frame

00:12:46.240 --> 00:12:47.490
of the playback of the video.

00:12:47.490 --> 00:12:51.476
But say, as was the case
in this original example,

00:12:51.476 --> 00:12:53.350
the horse is running so
fast that we actually

00:12:53.350 --> 00:12:57.050
can't see whether or not
it's lifting its legs up,

00:12:57.050 --> 00:12:58.550
or if all of its
legs are in the air

00:12:58.550 --> 00:13:02.334
at the same time, which was the
original bet between the two

00:13:02.334 --> 00:13:04.000
people that generated
this visualization

00:13:04.000 --> 00:13:04.791
in the first place.

00:13:04.791 --> 00:13:07.800
 

00:13:07.800 --> 00:13:10.480
But another drawback
is that we're

00:13:10.480 --> 00:13:12.770
stuck to only getting
an additional dimension,

00:13:12.770 --> 00:13:19.080
but with small multiples we
can go over columns and rows

00:13:19.080 --> 00:13:22.170
to get an extra two
dimensions of data.

00:13:22.170 --> 00:13:25.220
So take this example
from Andrew Gelman,

00:13:25.220 --> 00:13:27.345
which would be impossible
with simple animation.

00:13:27.345 --> 00:13:30.510
 

00:13:30.510 --> 00:13:32.350
It shows support
for school vouchers

00:13:32.350 --> 00:13:33.660
by race, income, and state.

00:13:33.660 --> 00:13:36.960
 

00:13:36.960 --> 00:13:39.370
And we can really see some
really interesting insights,

00:13:39.370 --> 00:13:42.360
if you look down
towards the bottom.

00:13:42.360 --> 00:13:47.190
People with low income-- Sorry.

00:13:47.190 --> 00:13:49.930
Let me backtrack a little bit.

00:13:49.930 --> 00:13:52.130
Not surprisingly,
rich, white people

00:13:52.130 --> 00:13:53.700
really like school vouchers.

00:13:53.700 --> 00:13:59.480
But surprisingly, so do
poor blacks and Hispanics.

00:13:59.480 --> 00:14:05.870
Whereas, white evangelicals
and white non-religions

00:14:05.870 --> 00:14:10.850
of low to medium economic status
are the ones who oppose it.

00:14:10.850 --> 00:14:15.430
 

00:14:15.430 --> 00:14:18.550
So the map itself only has
two dimensions of information,

00:14:18.550 --> 00:14:21.100
but the whole
visualization achieves

00:14:21.100 --> 00:14:25.280
four levels of dimensions,
it's four dimensions of data,

00:14:25.280 --> 00:14:28.140
by repeating the graphic
along the rows and columns.

00:14:28.140 --> 00:14:30.870
 

00:14:30.870 --> 00:14:32.995
So this is actually
really easy with Angular,

00:14:32.995 --> 00:14:36.136
just by using the ng-repeat.

00:14:36.136 --> 00:14:37.760
So this is a simple
example of a chart,

00:14:37.760 --> 00:14:39.210
of iterating over
several charts,

00:14:39.210 --> 00:14:41.230
and then creating the
donut chart directive

00:14:41.230 --> 00:14:43.470
for all the charts that
we have on our scope.

00:14:43.470 --> 00:14:46.660
 

00:14:46.660 --> 00:14:50.970
We can even put ng-repeats
inside of ng-repeats.

00:14:50.970 --> 00:14:52.760
Yo dog.

00:14:52.760 --> 00:14:56.560
Because no one ever made that
joke at a program unit before.

00:14:56.560 --> 00:14:58.250
So I have a little demo of that.

00:14:58.250 --> 00:15:03.250
 

00:15:03.250 --> 00:15:05.510
Hopefully it'll load.

00:15:05.510 --> 00:15:09.040
It did not in your
window, it loaded in mine.

00:15:09.040 --> 00:15:10.410
So here's the visualization.

00:15:10.410 --> 00:15:14.320
It's life expectancy by
sex, race, and state.

00:15:14.320 --> 00:15:16.660
And I'm just using
the same Mac directive

00:15:16.660 --> 00:15:20.790
for all of those elements.

00:15:20.790 --> 00:15:24.629
Let me see if I can show
you the Dom for this.

00:15:24.629 --> 00:15:25.670
The window is very tight.

00:15:25.670 --> 00:15:39.002
 

00:15:39.002 --> 00:15:40.960
So this ends up being
what the actual Dom looks

00:15:40.960 --> 00:15:44.240
like after Angular has gone
and done its dirty work.

00:15:44.240 --> 00:15:48.780
 

00:15:48.780 --> 00:15:50.660
And for every one
of these ng-repeats

00:15:50.660 --> 00:15:52.790
there's an inner
ng-repeat that iterates

00:15:52.790 --> 00:15:56.180
through all of the
different columns.

00:15:56.180 --> 00:15:57.660
This example is
also in the slide,

00:15:57.660 --> 00:16:00.170
so if you're interested
in seeing more about how,

00:16:00.170 --> 00:16:02.640
in fact, this visualization
was generated,

00:16:02.640 --> 00:16:04.720
just pull the slides
after the talk.

00:16:04.720 --> 00:16:09.460
 

00:16:09.460 --> 00:16:11.900
Also with Angular, it
makes it pretty easy

00:16:11.900 --> 00:16:15.210
to do responsive design,
which is useful just

00:16:15.210 --> 00:16:18.690
for web development in general.

00:16:18.690 --> 00:16:21.045
But is very handy, specifically
for data visualizations.

00:16:21.045 --> 00:16:27.290
 

00:16:27.290 --> 00:16:28.405
I'll reload this demo.

00:16:28.405 --> 00:16:34.250
 

00:16:34.250 --> 00:16:38.730
And you can see that
as I resize the window,

00:16:38.730 --> 00:16:41.152
the graph inside of it
is changing dynamically

00:16:41.152 --> 00:16:42.860
in response to the
changes in the window.

00:16:42.860 --> 00:16:49.830
 

00:16:49.830 --> 00:16:54.264
Again, that demo is available
in the slides repository.

00:16:54.264 --> 00:16:55.930
Another really great
thing about Angular

00:16:55.930 --> 00:17:01.070
is it makes it easy to do
interactivity, basically

00:17:01.070 --> 00:17:03.090
to hook up different
visualizations

00:17:03.090 --> 00:17:06.512
so that they represent or
are connected in some way.

00:17:06.512 --> 00:17:07.970
And so here is the
previous example

00:17:07.970 --> 00:17:11.550
I showed you earlier
that me and Lewis built

00:17:11.550 --> 00:17:14.440
to explain the
Simpson's paradox.

00:17:14.440 --> 00:17:18.490
And see, when we drag the
sliders, the table of bar

00:17:18.490 --> 00:17:20.810
charts and donut charts
updates accordingly.

00:17:20.810 --> 00:17:25.849
 

00:17:25.849 --> 00:17:28.119
And without Angular, this
would be rather tedious.

00:17:28.119 --> 00:17:32.280
 

00:17:32.280 --> 00:17:34.498
There's also another
more involved example

00:17:34.498 --> 00:17:36.123
of interactivity
across visualizations.

00:17:36.123 --> 00:17:44.080
 

00:17:44.080 --> 00:17:51.690
This is the demo
application you would

00:17:51.690 --> 00:17:53.780
need if you were
creating a video game

00:17:53.780 --> 00:17:56.690
and you wanted to have
non-playable characters.

00:17:56.690 --> 00:18:00.070
You could then add or
remove certain attributes,

00:18:00.070 --> 00:18:04.139
in our case, web strength,
speed, and agility

00:18:04.139 --> 00:18:05.680
for each of the
different characters.

00:18:05.680 --> 00:18:07.430
So here I'll add a
non-playable character,

00:18:07.430 --> 00:18:09.540
and that shows up
down at the bottom.

00:18:09.540 --> 00:18:11.560
But so does its average
appear at the top.

00:18:11.560 --> 00:18:15.340
 

00:18:15.340 --> 00:18:17.260
And I can add multiple
different characters,

00:18:17.260 --> 00:18:18.810
and it will affect the average.

00:18:18.810 --> 00:18:21.230
So if I click on one
of the attributes,

00:18:21.230 --> 00:18:24.045
you'll see the averages
above, updating accordingly.

00:18:24.045 --> 00:18:30.820
 

00:18:30.820 --> 00:18:32.500
Or I could change
the min and max

00:18:32.500 --> 00:18:33.666
of the different attributes.

00:18:33.666 --> 00:18:36.154
 

00:18:36.154 --> 00:18:37.695
Or I could add
additional attributes.

00:18:37.695 --> 00:18:46.680
 

00:18:46.680 --> 00:18:53.140
And again, because Angular makes
responsive design a lot easier,

00:18:53.140 --> 00:18:55.541
and rescale this window,
and the radar charts

00:18:55.541 --> 00:18:56.540
will update accordingly.

00:18:56.540 --> 00:19:09.250
 

00:19:09.250 --> 00:19:12.070
So I just have one
radar chart directive

00:19:12.070 --> 00:19:14.879
that I'm using across all
the different characters,

00:19:14.879 --> 00:19:15.920
and also in the averages.

00:19:15.920 --> 00:19:22.570
 

00:19:22.570 --> 00:19:24.410
So I hope I've
sufficiently convinced you

00:19:24.410 --> 00:19:28.040
to use directives when
doing data visualization.

00:19:28.040 --> 00:19:30.510
And so, the next
part of this talk

00:19:30.510 --> 00:19:34.840
will actually be us going
through and taking an existing

00:19:34.840 --> 00:19:39.675
donut chart in D3 and converting
it to an Angular directive.

00:19:39.675 --> 00:19:43.325
 

00:19:43.325 --> 00:19:45.700
Before I do that, just for
those in the room that may not

00:19:45.700 --> 00:19:47.283
be as familiar with
D3, I'm just going

00:19:47.283 --> 00:19:50.570
to go through 1,000
foot view of what D3 is

00:19:50.570 --> 00:19:53.910
and why you would want to
use it, pretty quickly.

00:19:53.910 --> 00:19:58.250
But just to get you motivated
for learning more about it.

00:19:58.250 --> 00:20:03.650
Essentially, D3 is a way for
you to manipulate the Dom based

00:20:03.650 --> 00:20:04.580
on data.

00:20:04.580 --> 00:20:07.850
That's where it gets its
name, Data Driven Documents.

00:20:07.850 --> 00:20:09.650
So if we wanted to,
say, add or remove

00:20:09.650 --> 00:20:14.500
different Dom elements that
corresponded to pie chart

00:20:14.500 --> 00:20:18.860
heights, it would be very
easy to do that in D3.

00:20:18.860 --> 00:20:21.860
D3's also very similar to
jQuery in its syntax and the way

00:20:21.860 --> 00:20:26.382
it works, but it adds
a lot of functionality

00:20:26.382 --> 00:20:28.965
that you would specifically need
for doing data visualization.

00:20:28.965 --> 00:20:32.150
 

00:20:32.150 --> 00:20:34.240
I also like to
think of D3 of just

00:20:34.240 --> 00:20:36.690
being a collection
of helper functions

00:20:36.690 --> 00:20:40.880
that make it easier to
do data visualization.

00:20:40.880 --> 00:20:43.800
It's almost sort of
like a meta library

00:20:43.800 --> 00:20:46.140
that you can use to create
your own visualizations.

00:20:46.140 --> 00:20:49.970
It's not something you
would use as just a way

00:20:49.970 --> 00:20:52.740
to include a bar
chart or pie chart.

00:20:52.740 --> 00:20:54.540
It's really more
for people wanting

00:20:54.540 --> 00:20:56.440
to create their
own visualizations,

00:20:56.440 --> 00:21:03.290
not from some cookie
cutter template.

00:21:03.290 --> 00:21:05.940
So just to give you an
example of some of flexibility

00:21:05.940 --> 00:21:09.200
and power of D3, here's a
really contrived example

00:21:09.200 --> 00:21:14.080
of just some data, the
values 20, 50 and 80.

00:21:14.080 --> 00:21:17.365
I then select the body,
kind of like in jQuery.

00:21:17.365 --> 00:21:19.860
I also select divs
that don't exist yet.

00:21:19.860 --> 00:21:25.580
This is kind of the magic of D3.

00:21:25.580 --> 00:21:29.150
And then I pen divs for every
one of the elements in the data

00:21:29.150 --> 00:21:33.090
and then set its width attribute
to the value in the data.

00:21:33.090 --> 00:21:36.310
And this is what a Dom
ends up looking like.

00:21:36.310 --> 00:21:38.460
There's three Dom
elements, each of them

00:21:38.460 --> 00:21:42.920
have widths, 20%, 50% and 80%.

00:21:42.920 --> 00:21:50.990
So here's just a quick demo
of that code, and the three

00:21:50.990 --> 00:21:52.895
different div bar charts.

00:21:52.895 --> 00:21:58.770
 

00:21:58.770 --> 00:22:02.234
Another great thing about
D3 is its collection

00:22:02.234 --> 00:22:03.650
of these sort of
helper functions,

00:22:03.650 --> 00:22:05.900
and one in particular that
I'll just skim over briefly

00:22:05.900 --> 00:22:11.520
because we'll be using it later,
is the D3 layout pie generator.

00:22:11.520 --> 00:22:15.410
And so with it we can take
data, create a generator, a pie

00:22:15.410 --> 00:22:19.580
generator, and then path our
data to that pie generator,

00:22:19.580 --> 00:22:21.930
and it will give us all of
the start and end angles

00:22:21.930 --> 00:22:26.410
that would create a donut chart.

00:22:26.410 --> 00:22:28.410
This is the code that
would actually go and take

00:22:28.410 --> 00:22:34.790
that data, that pie chart data,
and create the necessary SVG

00:22:34.790 --> 00:22:35.580
paths.

00:22:35.580 --> 00:22:40.924
And SVG is just another--
It's just like the Dom.

00:22:40.924 --> 00:22:42.340
I'm not going to
get into for now,

00:22:42.340 --> 00:22:44.090
but just think about
it like any other Dom

00:22:44.090 --> 00:22:46.510
components you'd
like to manipulate.

00:22:46.510 --> 00:22:49.820
And we'll set some styles
and I'll pull out the demo.

00:22:49.820 --> 00:22:55.800
 

00:22:55.800 --> 00:22:56.720
And there it is.

00:22:56.720 --> 00:23:00.920
It's in the upper right-hand
corner, so that's no good.

00:23:00.920 --> 00:23:04.730
So we'll have to translate
it by some amount, so it's

00:23:04.730 --> 00:23:07.606
in the center, or
so it just is not

00:23:07.606 --> 00:23:09.230
in the upper right-hand
corner anymore.

00:23:09.230 --> 00:23:12.360
 

00:23:12.360 --> 00:23:15.100
And there it is, and
there's our donut chart.

00:23:15.100 --> 00:23:17.060
So we'll be using
that code later on

00:23:17.060 --> 00:23:18.600
to create our directive.

00:23:18.600 --> 00:23:20.220
But just to give you
some quick links,

00:23:20.220 --> 00:23:21.800
so if you want to pull it
down, these slides later,

00:23:21.800 --> 00:23:23.680
and just learn more
about how these work.

00:23:23.680 --> 00:23:28.150
There's an SVG primer, A Good
SVG Primer, by Scott Murray.

00:23:28.150 --> 00:23:31.500
Let's Make a Bar
Chart, by Mike Bostock.

00:23:31.500 --> 00:23:34.060
And Thinking with Joins,
also by Mike Bostock.

00:23:34.060 --> 00:23:35.594
And I'll explain
some of the magic

00:23:35.594 --> 00:23:36.760
that I went through earlier.

00:23:36.760 --> 00:23:41.060
 

00:23:41.060 --> 00:23:44.370
So now we're really going to
get into creating a directive.

00:23:44.370 --> 00:23:50.652
So I'm actually going to hop
out of this mirrored mode.

00:23:50.652 --> 00:23:52.110
And so you'll be
seeing what I see.

00:23:52.110 --> 00:24:23.370
 

00:24:23.370 --> 00:24:26.570
So there's a donut chart,
very similar like what

00:24:26.570 --> 00:24:30.070
we had before, except now
we're giving it some color.

00:24:30.070 --> 00:24:32.190
We're also dynamically
changing its size,

00:24:32.190 --> 00:24:34.420
depending on its container.

00:24:34.420 --> 00:24:37.890
In this case, it's just a div,
but it's not responsive yet.

00:24:37.890 --> 00:24:42.039
 

00:24:42.039 --> 00:24:43.580
So we'd like it to
be in a directive.

00:24:43.580 --> 00:24:45.206
So how do we about doing that?

00:24:45.206 --> 00:24:47.830
Well, the first step, obviously,
is we need to include Angular.

00:24:47.830 --> 00:24:53.474
 

00:24:53.474 --> 00:24:55.390
After that, we'll also
need to create our app.

00:24:55.390 --> 00:25:00.730
 

00:25:00.730 --> 00:25:01.372
Give it a name.

00:25:01.372 --> 00:25:02.830
And it won't have
any dependencies.

00:25:02.830 --> 00:25:05.565
 

00:25:05.565 --> 00:25:16.690
We also need to tell Angular
where our app begins,

00:25:16.690 --> 00:25:18.425
and also create our directive.

00:25:18.425 --> 00:25:22.360
 

00:25:22.360 --> 00:25:25.490
And so we want it to be called
donut chart, or donut.chart,

00:25:25.490 --> 00:25:27.960
but we have to specify
donut, capital C, Chart.

00:25:27.960 --> 00:25:32.117
 

00:25:32.117 --> 00:25:33.700
And the directive
also needs to return

00:25:33.700 --> 00:25:36.560
an object that has on
it a link function.

00:25:36.560 --> 00:25:41.610
 

00:25:41.610 --> 00:25:44.620
And this link function you can
think of as an constructor.

00:25:44.620 --> 00:25:48.060
It will be called for every
time you press the stamp down

00:25:48.060 --> 00:25:51.130
to create new donut chart.

00:25:51.130 --> 00:25:52.840
And that gets called
with few arguments--

00:25:52.840 --> 00:25:55.850
scope, the elements,
type it out,

00:25:55.850 --> 00:25:59.650
but really we're just going
to call it EL for now.

00:25:59.650 --> 00:26:01.910
And attr, we won't worry
about that for now, either.

00:26:01.910 --> 00:26:13.780
 

00:26:13.780 --> 00:26:15.740
So I just want to
test and make sure

00:26:15.740 --> 00:26:18.010
that everything's
wired up correctly.

00:26:18.010 --> 00:26:18.590
Just do that.

00:26:18.590 --> 00:26:21.075
I'm going to add an
SVG to the element

00:26:21.075 --> 00:26:23.450
inside of the directives, sort
of the containing element.

00:26:23.450 --> 00:26:26.850
This'll be called donut chart.

00:26:26.850 --> 00:26:28.480
Element we access
just like in jQuery,

00:26:28.480 --> 00:26:30.271
since it's sort of a
jQuery wrapped object.

00:26:30.271 --> 00:26:31.732
It's not exactly
jQuery, but it's

00:26:31.732 --> 00:26:32.940
like a jQuery wrapped object.

00:26:32.940 --> 00:26:34.550
So we'll need some
way to reference

00:26:34.550 --> 00:26:36.130
that element directly.

00:26:36.130 --> 00:26:38.302
And then use D3 to
select it, and then

00:26:38.302 --> 00:26:39.550
a penned and SVG to it.

00:26:39.550 --> 00:26:42.580
 

00:26:42.580 --> 00:26:43.080
Oop.

00:26:43.080 --> 00:26:44.920
But we should comment
out our D3 code first.

00:26:44.920 --> 00:26:48.020
 

00:26:48.020 --> 00:26:50.100
Ah, but there's nothing there.

00:26:50.100 --> 00:26:54.420
That's because we don't actually
have a donut chart element.

00:26:54.420 --> 00:27:01.042
 

00:27:01.042 --> 00:27:02.720
Oh, but that
doesn't work either.

00:27:02.720 --> 00:27:06.070
We actually need to
specify to Angular

00:27:06.070 --> 00:27:08.222
that we'd like our
directive to look like this.

00:27:08.222 --> 00:27:10.680
But this will be the type of
directive that we'll be using.

00:27:10.680 --> 00:27:11.638
It will be donut-chart.

00:27:11.638 --> 00:27:15.640
 

00:27:15.640 --> 00:27:17.390
Obviously, there was
nothing there before,

00:27:17.390 --> 00:27:18.640
because we're just adding SVG.

00:27:18.640 --> 00:27:24.638
But now the SVG is inside
of our donut chart element.

00:27:24.638 --> 00:27:25.930
I hope you all can see this.

00:27:25.930 --> 00:27:31.510
 

00:27:31.510 --> 00:27:33.010
So great.

00:27:33.010 --> 00:27:35.380
Now we have everything we
need to be able to just plug

00:27:35.380 --> 00:27:41.930
in our D3 code right inside
of our directive to have

00:27:41.930 --> 00:27:42.940
what we had before.

00:27:42.940 --> 00:27:53.390
 

00:27:53.390 --> 00:27:56.680
But instead of selecting
the div directly on the Dom,

00:27:56.680 --> 00:27:59.150
we'll just pass
the element to D3.

00:27:59.150 --> 00:28:03.664
 

00:28:03.664 --> 00:28:05.330
Actually, we don't
even need to do that.

00:28:05.330 --> 00:28:07.170
We'll just do EL equals EL0.

00:28:07.170 --> 00:28:13.506
 

00:28:13.506 --> 00:28:14.880
But our width and
height is zero,

00:28:14.880 --> 00:28:17.860
so why is that-- Oh, it's
because we have absolute-- Oh,

00:28:17.860 --> 00:28:20.090
because we're not actually
selecting our donut

00:28:20.090 --> 00:28:22.010
chart within our CSS.

00:28:22.010 --> 00:28:26.462
We're selecting a CSS
class called donut chart.

00:28:26.462 --> 00:28:28.920
We're not actually selecting
an element called donut chart.

00:28:28.920 --> 00:28:31.612
So we'll need to change the CSS.

00:28:31.612 --> 00:28:33.820
And there's our donut chart,
inside of our directive.

00:28:33.820 --> 00:28:41.810
 

00:28:41.810 --> 00:28:44.830
So already, we can now
reuse that donut chart.

00:28:44.830 --> 00:28:49.340
So instead of giving it a width
and height of 100% by 100%,

00:28:49.340 --> 00:28:51.770
I'll just give it
100 for now, and tell

00:28:51.770 --> 00:28:55.350
it to display like a
block in block style.

00:28:55.350 --> 00:28:57.240
And then we'll add
another donut chart.

00:28:57.240 --> 00:28:59.901
 

00:28:59.901 --> 00:29:00.400
Great.

00:29:00.400 --> 00:29:03.260
So now we have two donut
charts inside of Angular.

00:29:03.260 --> 00:29:09.614
 

00:29:09.614 --> 00:29:10.530
But there's a problem.

00:29:10.530 --> 00:29:12.680
We have our data inside
of our directive,

00:29:12.680 --> 00:29:13.869
and that's just not good.

00:29:13.869 --> 00:29:15.660
Because every time we
create a donut chart,

00:29:15.660 --> 00:29:17.494
we don't want to always
have that same data.

00:29:17.494 --> 00:29:19.201
We like to be able to
configure our donut

00:29:19.201 --> 00:29:20.860
charts so it can
have different data.

00:29:20.860 --> 00:29:25.200
 

00:29:25.200 --> 00:29:27.330
Something like this
would be really nice.

00:29:27.330 --> 00:29:34.360
 

00:29:34.360 --> 00:29:36.730
The better example,
maybe 10 and 3.

00:29:36.730 --> 00:29:40.634
 

00:29:40.634 --> 00:29:45.070
It's hard to come up with
random numbers on the spot.

00:29:45.070 --> 00:29:47.670
So that's actually a
really easy change.

00:29:47.670 --> 00:29:53.994
We could just use scope.data
to reference the data scoped

00:29:53.994 --> 00:29:55.160
variable on the donut chart.

00:29:55.160 --> 00:29:56.740
But there's one
small little change

00:29:56.740 --> 00:29:58.820
we have to make to the
object that we returned

00:29:58.820 --> 00:30:00.236
from our directive,
and that is we

00:30:00.236 --> 00:30:03.930
have tell Angular that our
directive will be receiving

00:30:03.930 --> 00:30:05.900
a property on its
scope called data.

00:30:05.900 --> 00:30:09.147
 

00:30:09.147 --> 00:30:10.105
Oops, that's not right.

00:30:10.105 --> 00:30:16.050
 

00:30:16.050 --> 00:30:19.134
So there you have it.

00:30:19.134 --> 00:30:20.550
We'll make it a
little bit bigger.

00:30:20.550 --> 00:30:25.060
 

00:30:25.060 --> 00:30:25.560
Whoa.

00:30:25.560 --> 00:30:26.410
Maybe too big.

00:30:26.410 --> 00:30:30.920
 

00:30:30.920 --> 00:30:32.660
So great.

00:30:32.660 --> 00:30:34.920
Now what would be
really cool, though,

00:30:34.920 --> 00:30:38.400
if our donut chart
was responsive so

00:30:38.400 --> 00:30:41.960
that we could resize
the window, or we

00:30:41.960 --> 00:30:45.700
wouldn't have to always resize
the window for the donut chart

00:30:45.700 --> 00:30:46.470
to fill the space.

00:30:46.470 --> 00:30:50.615
So let's actually change the
CSS back to be 100% by 100%.

00:30:50.615 --> 00:31:06.328
 

00:31:06.328 --> 00:31:09.519
Actually, I'm going to
backtrack just a little bit.

00:31:09.519 --> 00:31:11.060
Instead of doing
that, let's actually

00:31:11.060 --> 00:31:12.990
talk a little bit
about ng-repeat,

00:31:12.990 --> 00:31:14.860
which is what I was
talking about earlier,

00:31:14.860 --> 00:31:17.300
and it makes small
multiples really easy.

00:31:17.300 --> 00:31:19.184
So let's throw an
ng-repeat inside of here

00:31:19.184 --> 00:31:20.100
and see if that works.

00:31:20.100 --> 00:31:27.500
 

00:31:27.500 --> 00:31:31.380
Also, set charts
on the outer scope

00:31:31.380 --> 00:31:35.527
to be something like
some array of data

00:31:35.527 --> 00:31:36.735
within another array of data.

00:31:36.735 --> 00:31:40.560
 

00:31:40.560 --> 00:31:43.070
So now we have this array
of arrays called charts,

00:31:43.070 --> 00:31:45.380
and we'll iterate through
it instead of ng-repeat

00:31:45.380 --> 00:31:47.240
for all the different
donut charts.

00:31:47.240 --> 00:31:52.080
And we'll pass chart to the
data property of our donut chart

00:31:52.080 --> 00:31:53.660
directive.

00:31:53.660 --> 00:31:54.310
Sweet.

00:31:54.310 --> 00:31:55.476
So we have these two charts.

00:31:55.476 --> 00:32:00.227
 

00:32:00.227 --> 00:32:01.810
Also, I just want
to talk a little bit

00:32:01.810 --> 00:32:04.729
about using controller.

00:32:04.729 --> 00:32:06.270
Generally, you don't
want to actually

00:32:06.270 --> 00:32:08.560
be putting all your
data right in the Dom,

00:32:08.560 --> 00:32:10.960
although it does really make
it easy to quickly create

00:32:10.960 --> 00:32:12.870
data visualization.

00:32:12.870 --> 00:32:15.480
We'll, right now, go
through the process

00:32:15.480 --> 00:32:17.670
of creating a controller.

00:32:17.670 --> 00:32:21.972
 

00:32:21.972 --> 00:32:23.600
We'll call it donut
chart controller.

00:32:23.600 --> 00:32:31.129
 

00:32:31.129 --> 00:32:32.670
I think that's long
enough of a name.

00:32:32.670 --> 00:32:35.500
 

00:32:35.500 --> 00:32:40.300
Also have it use the scope,
and we'll create something

00:32:40.300 --> 00:32:41.795
on the scope called
charts that it

00:32:41.795 --> 00:32:43.940
will use to pull
the charts from.

00:32:43.940 --> 00:32:47.010
So we're no longer stuck
inside of HTML world

00:32:47.010 --> 00:32:49.000
that's sticking
with expressions.

00:32:49.000 --> 00:32:50.730
Angular allows,
now we can actually

00:32:50.730 --> 00:32:54.680
throw in Vanilla JavaScript
objects and code.

00:32:54.680 --> 00:32:57.150
So I'll be using
D3 inside of here

00:32:57.150 --> 00:33:02.500
to create an array of 10 charts.

00:33:02.500 --> 00:33:08.690
Inside of each of those
charts, each of those charts

00:33:08.690 --> 00:33:10.585
will have 10 elements
of random data.

00:33:10.585 --> 00:33:14.285
 

00:33:14.285 --> 00:33:14.910
This all right?

00:33:14.910 --> 00:33:15.410
OK.

00:33:15.410 --> 00:33:19.050
 

00:33:19.050 --> 00:33:19.849
Sweet.

00:33:19.849 --> 00:33:21.140
Now we've got all these charts.

00:33:21.140 --> 00:33:22.723
They've all got their
own random data.

00:33:22.723 --> 00:33:26.147
 

00:33:26.147 --> 00:33:27.730
I'll also make these
a little smaller.

00:33:27.730 --> 00:33:32.305
 

00:33:32.305 --> 00:33:32.805
Cool.

00:33:32.805 --> 00:33:36.430
 

00:33:36.430 --> 00:33:38.176
Maybe give them 100.

00:33:38.176 --> 00:33:38.675
Cool.

00:33:38.675 --> 00:33:44.520
 

00:33:44.520 --> 00:33:49.210
So we're on a pretty
good roll here.

00:33:49.210 --> 00:33:51.354
But now, wouldn't it
be cool if actually

00:33:51.354 --> 00:33:53.020
all of our donut
charts were responsive,

00:33:53.020 --> 00:33:56.140
so that whenever
we resize the page,

00:33:56.140 --> 00:33:58.140
all the donut charts
would update accordingly,

00:33:58.140 --> 00:34:01.470
and there would only always
be, say, 10 donut charts

00:34:01.470 --> 00:34:04.200
on the line.

00:34:04.200 --> 00:34:08.540
So to do that first,
we'll need ng-style,

00:34:08.540 --> 00:34:11.451
and this basically allows us
to dynamically apply styles

00:34:11.451 --> 00:34:12.200
to our directives.

00:34:12.200 --> 00:34:20.469
 

00:34:20.469 --> 00:34:22.139
Wow.

00:34:22.139 --> 00:34:24.199
maybe not 100.

00:34:24.199 --> 00:34:27.530
We'll just say 10 for now.

00:34:27.530 --> 00:34:28.389
OK, cool.

00:34:28.389 --> 00:34:31.638
And that's not so bad,
but it's not great either.

00:34:31.638 --> 00:34:33.179
We'd really like it
if they would all

00:34:33.179 --> 00:34:36.000
change their size, too,
whenever we resize the window.

00:34:36.000 --> 00:34:46.134
 

00:34:46.134 --> 00:34:47.634
Also change these
to be percentages.

00:34:47.634 --> 00:35:01.130
 

00:35:01.130 --> 00:35:04.950
So we need our directive to
update in some way, whenever

00:35:04.950 --> 00:35:06.700
it's containing width
and height changes.

00:35:06.700 --> 00:35:14.490
So to do that, we'll need
to do scope.watch, and then

00:35:14.490 --> 00:35:23.369
give it a function
that returns the width

00:35:23.369 --> 00:35:24.910
and height of the
containing element.

00:35:24.910 --> 00:35:28.200
And whenever the return
value inside of here changes,

00:35:28.200 --> 00:35:31.070
the second callback
will be fired.

00:35:31.070 --> 00:35:33.490
And so this will handle
resizing our donut chart.

00:35:33.490 --> 00:35:36.500
 

00:35:36.500 --> 00:35:37.600
I see some closed eyes.

00:35:37.600 --> 00:35:39.796
What's up?

00:35:39.796 --> 00:35:40.520
Ah, where?

00:35:40.520 --> 00:35:43.910
 

00:35:43.910 --> 00:35:46.350
Width, client, height.

00:35:46.350 --> 00:35:48.200
Thank you.

00:35:48.200 --> 00:35:50.430
Good call.

00:35:50.430 --> 00:35:52.491
So yeah, so inside of
here we'll do everything

00:35:52.491 --> 00:35:54.615
that we'll need to change
whenever the client width

00:35:54.615 --> 00:35:56.114
and height changes.

00:35:56.114 --> 00:35:58.030
We'll also need to update
the width and height

00:35:58.030 --> 00:35:58.988
to be those new values.

00:35:58.988 --> 00:36:07.332
 

00:36:07.332 --> 00:36:09.290
And now, we'll also need
to take all the things

00:36:09.290 --> 00:36:11.540
in our donut chart that
depend on the width and height

00:36:11.540 --> 00:36:14.260
and put them now inside of
this callback, because all

00:36:14.260 --> 00:36:15.920
those things will
need to be updated

00:36:15.920 --> 00:36:17.734
when the width and
height changes.

00:36:17.734 --> 00:36:19.150
So just going down
from the top it

00:36:19.150 --> 00:36:21.585
looks like min also depends
on width and height.

00:36:21.585 --> 00:36:25.110
 

00:36:25.110 --> 00:36:28.860
And the arc, the arc's
inner and outer radius

00:36:28.860 --> 00:36:31.907
also depends on min,
which in return, depends

00:36:31.907 --> 00:36:32.740
on width and height.

00:36:32.740 --> 00:36:45.880
 

00:36:45.880 --> 00:36:49.664
It also looks like the
SVG needs to be updated

00:36:49.664 --> 00:36:51.080
when the width and
height changes.

00:36:51.080 --> 00:36:55.440
 

00:36:55.440 --> 00:36:58.410
And also, this inner group that
will translate the donut chart

00:36:58.410 --> 00:37:00.187
into the center
needs to be updated

00:37:00.187 --> 00:37:01.770
whenever the width
and height changes.

00:37:01.770 --> 00:37:03.480
So we'll give that
a name right now.

00:37:03.480 --> 00:37:11.860
We'll call it G, and
update it instead,

00:37:11.860 --> 00:37:15.165
inside of the scope.watch when
with width and height changes.

00:37:15.165 --> 00:37:19.750
 

00:37:19.750 --> 00:37:22.790
So I think that's everything.

00:37:22.790 --> 00:37:23.290
Whoa.

00:37:23.290 --> 00:37:27.310
 

00:37:27.310 --> 00:37:29.130
What did we forget?

00:37:29.130 --> 00:37:29.780
Oh.

00:37:29.780 --> 00:37:33.550
So whenever it first
loads, it looks

00:37:33.550 --> 00:37:36.730
like they're all
set to 100 by 100.

00:37:36.730 --> 00:37:40.850
But the client width
and height changes,

00:37:40.850 --> 00:37:44.090
and we never get those
updates whenever it happens.

00:37:44.090 --> 00:37:47.230
So we actually need
to also tell Angular,

00:37:47.230 --> 00:37:48.686
hey, the window resized.

00:37:48.686 --> 00:37:49.810
Someone resized the window.

00:37:49.810 --> 00:37:52.190
Go check if anything
on the scope changed

00:37:52.190 --> 00:37:57.320
and run all of those associated
watches for the client, width

00:37:57.320 --> 00:37:58.060
and height.

00:37:58.060 --> 00:38:00.550
So that's actually a simple fix.

00:38:00.550 --> 00:38:03.400
We can just do scope--
inside of the controller,

00:38:03.400 --> 00:38:07.620
we can do scope.-- Not scope.

00:38:07.620 --> 00:38:13.040
You can have it
depend on the window,

00:38:13.040 --> 00:38:18.740
and watch for resize events on
the window, and tell Angular,

00:38:18.740 --> 00:38:21.125
hey, check for changes.

00:38:21.125 --> 00:38:23.490
 

00:38:23.490 --> 00:38:23.990
Whoa.

00:38:23.990 --> 00:38:27.257
 

00:38:27.257 --> 00:38:28.090
How's the method on?

00:38:28.090 --> 00:38:28.590
Oh.

00:38:28.590 --> 00:38:32.190
So we forgot to wrap our window
inside of the sort of Angular

00:38:32.190 --> 00:38:34.115
version of jQuery,
and to do that we'll

00:38:34.115 --> 00:38:35.240
have to do Angular.element.

00:38:35.240 --> 00:38:40.220
 

00:38:40.220 --> 00:38:40.720
Ah.

00:38:40.720 --> 00:38:41.510
There we go.

00:38:41.510 --> 00:38:45.820
So it's kind of working,
but still, the radiis

00:38:45.820 --> 00:38:46.570
are not updating.

00:38:46.570 --> 00:38:49.936
So actually, we also forgot
to apply the arc to the path.

00:38:49.936 --> 00:38:51.560
That was the other
thing, that depended

00:38:51.560 --> 00:38:53.684
on something that depended
on the width and height.

00:38:53.684 --> 00:38:59.110
So the arc depended
on a min-- I'm sorry,

00:38:59.110 --> 00:39:02.130
the arc path depended
on the arc generator,

00:39:02.130 --> 00:39:03.820
the arc generator
depended on min,

00:39:03.820 --> 00:39:05.195
min depended on
width and height.

00:39:05.195 --> 00:39:08.010
So we'll need to actually take
that, you see this right here,

00:39:08.010 --> 00:39:13.000
and add it to our watch for
the client, width and height.

00:39:13.000 --> 00:39:17.320
Also need to give it a name,
if it doesn't have one yet.

00:39:17.320 --> 00:39:19.000
Cool.

00:39:19.000 --> 00:39:23.250
Now we have dynamically
resized, responsive donut charts

00:39:23.250 --> 00:39:23.800
in Angular.

00:39:23.800 --> 00:39:31.152
[APPLAUSE]

00:39:31.152 --> 00:39:33.110
So the next thing you
probably might want to do

00:39:33.110 --> 00:39:35.650
is have your data update.

00:39:35.650 --> 00:39:38.590
Maybe we're getting a live
feed from some data source

00:39:38.590 --> 00:39:41.180
and we'd like the donut chart
to always be adjusting or adding

00:39:41.180 --> 00:39:41.990
new data points.

00:39:41.990 --> 00:39:45.130
 

00:39:45.130 --> 00:39:47.839
Well, to do that, we'll
first need the arc function.

00:39:47.839 --> 00:39:49.880
And I've included the
reference to Mike Bostock's

00:39:49.880 --> 00:39:52.690
original demo, which
describes how this works.

00:39:52.690 --> 00:39:55.690
But for now, don't so much
worry about the details.

00:39:55.690 --> 00:39:58.270
Just know that it will be
responsible for transitioning

00:39:58.270 --> 00:40:02.220
our arc paths from one
configuration to another.

00:40:02.220 --> 00:40:13.590
 

00:40:13.590 --> 00:40:15.850
You also need to watch
for changes to the data,

00:40:15.850 --> 00:40:18.050
and that's what this does.

00:40:18.050 --> 00:40:20.670
Any time the data changes,
this functional will run.

00:40:20.670 --> 00:40:23.870
And in it, the arcs will
be transitioned in or out,

00:40:23.870 --> 00:40:26.530
and so for arcs.enter,
all of this

00:40:26.530 --> 00:40:30.730
will happen when there's
more data in a pie chart

00:40:30.730 --> 00:40:32.970
than there was before.

00:40:32.970 --> 00:40:34.630
Similarly, for
arcs.exit, all of this

00:40:34.630 --> 00:40:37.260
will run whenever there's
less data in the donut chart

00:40:37.260 --> 00:40:39.630
than there was before.

00:40:39.630 --> 00:40:43.804
And these will be run for
any past data pairs that

00:40:43.804 --> 00:40:45.845
will remain in the chart
between the transitions.

00:40:45.845 --> 00:40:55.740
 

00:40:55.740 --> 00:40:57.170
So that's good.

00:40:57.170 --> 00:40:59.740
But we also need some way to
sort of test our little demo.

00:40:59.740 --> 00:41:02.580
We need some way for the data to
update inside of the directive.

00:41:02.580 --> 00:41:06.400
So for that to happen, I just
have this little snippet here.

00:41:06.400 --> 00:41:10.550
So any time anyone
clicks on the SVG run,

00:41:10.550 --> 00:41:12.729
enter the Angular world,
essentially saying, hey,

00:41:12.729 --> 00:41:14.520
after I do all these
things inside of here,

00:41:14.520 --> 00:41:16.437
check for changes on the scope.

00:41:16.437 --> 00:41:18.270
And in this case, we'll
be changing the data

00:41:18.270 --> 00:41:20.990
on the directive.

00:41:20.990 --> 00:41:22.970
Just some random new data.

00:41:22.970 --> 00:41:32.030
 

00:41:32.030 --> 00:41:32.530
Oh.

00:41:32.530 --> 00:41:33.238
That didn't work.

00:41:33.238 --> 00:41:34.080
Why did it not work?

00:41:34.080 --> 00:41:37.340
 

00:41:37.340 --> 00:41:38.260
Do we have an error.

00:41:38.260 --> 00:41:39.410
Ah.

00:41:39.410 --> 00:41:44.230
So I forgot to-- since
now the piece of code

00:41:44.230 --> 00:41:46.990
that is responsible for
adding or removing arc paths

00:41:46.990 --> 00:41:49.690
is inside of
scope.watch data, we

00:41:49.690 --> 00:41:53.980
need to make sure that we don't
do any of that outside of it.

00:41:53.980 --> 00:41:57.780
So, in this case, we have
these arcs, this arc selector,

00:41:57.780 --> 00:42:00.826
and we're binding the
data, when it really

00:42:00.826 --> 00:42:02.200
is not responsible
for it outside

00:42:02.200 --> 00:42:03.602
of the scope.watch data.

00:42:03.602 --> 00:42:04.560
So I'll just remove it.

00:42:04.560 --> 00:42:08.570
 

00:42:08.570 --> 00:42:11.710
And it may be somewhere else,
but I think that's good.

00:42:11.710 --> 00:42:12.210
Sweet.

00:42:12.210 --> 00:42:16.140
So now we have these
transitioning donut charts.

00:42:16.140 --> 00:42:18.650
They start out with no data,
they get data, they animate in,

00:42:18.650 --> 00:42:23.032
and they look awesome
because they're animated.

00:42:23.032 --> 00:42:24.240
People love things that move.

00:42:24.240 --> 00:42:27.770
 

00:42:27.770 --> 00:42:30.490
So now, wouldn't it be cool
if, for whatever reason,

00:42:30.490 --> 00:42:33.370
we wanted all of these donut
charts to share the same data.

00:42:33.370 --> 00:42:35.857
We wanted it so that when
clicking on one-- well,

00:42:35.857 --> 00:42:38.065
actually, let's press the
test if we can click on one

00:42:38.065 --> 00:42:38.510
and update it.

00:42:38.510 --> 00:42:39.551
We haven't done that yet.

00:42:39.551 --> 00:42:41.230
So I can click on
one donut chart.

00:42:41.230 --> 00:42:45.830
Its data is being updated from
the code that I've just added.

00:42:45.830 --> 00:42:48.993
Every time I click, scope.data
is being set to some new value.

00:42:48.993 --> 00:42:55.731
 

00:42:55.731 --> 00:42:56.230
Whoa.

00:42:56.230 --> 00:42:58.957
 

00:42:58.957 --> 00:43:00.040
That kind of looks cooler.

00:43:00.040 --> 00:43:03.370
 

00:43:03.370 --> 00:43:07.360
So yeah, we would like
the data to be shared,

00:43:07.360 --> 00:43:09.980
so just as a contrived
example, I'll

00:43:09.980 --> 00:43:12.480
just add some new
variable to the scope.

00:43:12.480 --> 00:43:18.070
I'll call it Our Data and
just copy what we had up here.

00:43:18.070 --> 00:43:19.130
I'm creating a chart.

00:43:19.130 --> 00:43:22.915
 

00:43:22.915 --> 00:43:24.790
And now they'll all just
use that same shared

00:43:24.790 --> 00:43:26.940
object, Our Data.

00:43:26.940 --> 00:43:27.440
Sweet.

00:43:27.440 --> 00:43:30.260
They all have the same data.

00:43:30.260 --> 00:43:34.180
When I click on one, they all--
oh, they don't all update.

00:43:34.180 --> 00:43:38.520
So this is sort of a gotcha
when using ng-repeat.

00:43:38.520 --> 00:43:41.180
ng-repeat will
create a new scope

00:43:41.180 --> 00:43:43.580
for all of your
different directives

00:43:43.580 --> 00:43:45.310
that use the ng-repeat.

00:43:45.310 --> 00:43:49.530
So if you're familiar with
object-oriented programming,

00:43:49.530 --> 00:43:52.150
particularly in JavaScript
using the prototype chain,

00:43:52.150 --> 00:43:58.180
if you have an object that is an
instance of some parent class,

00:43:58.180 --> 00:44:01.120
if you set a variable
on it to some new value,

00:44:01.120 --> 00:44:02.750
that property will
be that new value,

00:44:02.750 --> 00:44:05.890
and it will not
overwrite the parent.

00:44:05.890 --> 00:44:07.740
And that's exactly
what's happening here.

00:44:07.740 --> 00:44:10.750
We need some way to prevent
our data from being overwritten

00:44:10.750 --> 00:44:14.450
on the scope for
the parent property.

00:44:14.450 --> 00:44:20.180
And so one trick to do that is
to just use sort of a shared

00:44:20.180 --> 00:44:23.750
object, an additional
object on the parent scope

00:44:23.750 --> 00:44:26.311
that will never get overwritten
by us, on any of the child

00:44:26.311 --> 00:44:26.810
scopes.

00:44:26.810 --> 00:44:32.590
 

00:44:32.590 --> 00:44:35.105
Also, you need to update
it in our directive.

00:44:35.105 --> 00:44:40.951
 

00:44:40.951 --> 00:44:41.450
Oh no.

00:44:41.450 --> 00:44:44.220
 

00:44:44.220 --> 00:44:47.370
The worst error is
no error at all.

00:44:47.370 --> 00:44:48.480
I called it charts now.

00:44:48.480 --> 00:45:01.480
 

00:45:01.480 --> 00:45:01.980
Ah.

00:45:01.980 --> 00:45:04.140
I don't have it called charts.

00:45:04.140 --> 00:45:06.750
I deleted this.

00:45:06.750 --> 00:45:08.195
They had this up here.

00:45:08.195 --> 00:45:10.070
Charts, actually, will
still be on the scope.

00:45:10.070 --> 00:45:18.870
 

00:45:18.870 --> 00:45:20.290
Oh no.

00:45:20.290 --> 00:45:21.670
The demo gods will not allow.

00:45:21.670 --> 00:45:33.406
 

00:45:33.406 --> 00:45:36.770
I'll just chart our Our Data.

00:45:36.770 --> 00:45:40.780
 

00:45:40.780 --> 00:45:43.130
I'll leave that there for now.

00:45:43.130 --> 00:45:45.250
Our Data.

00:45:45.250 --> 00:45:45.750
Sweet.

00:45:45.750 --> 00:45:48.249
So now they all share the same
data, so when I click on one,

00:45:48.249 --> 00:45:53.330
it'll be updated across
all the donut charts,

00:45:53.330 --> 00:45:55.410
or however many
we decide to have.

00:45:55.410 --> 00:45:58.850
 

00:45:58.850 --> 00:46:06.415
Maybe we'll make them 140 high,
and give them 100 of them.

00:46:06.415 --> 00:46:06.915
Whoa.

00:46:06.915 --> 00:46:14.270
 

00:46:14.270 --> 00:46:17.610
So that concludes the talk.

00:46:17.610 --> 00:46:22.630
I went over a lot, so if you
feel confused, that's OK.

00:46:22.630 --> 00:46:26.530
As long as you feel compelled
to now combine D3 and Angular,

00:46:26.530 --> 00:46:27.300
I'm happy.

00:46:27.300 --> 00:46:32.100
 

00:46:32.100 --> 00:46:36.774
I guess now, let me close
and go back to my slides,

00:46:36.774 --> 00:46:37.565
if I can find them.

00:46:37.565 --> 00:46:51.270
 

00:46:51.270 --> 00:46:54.865
So now it's time for Q&amp;A,
if anyone has any questions.

00:46:54.865 --> 00:47:04.670
 

00:47:04.670 --> 00:47:07.180
Is now a good time
for QA by the way?

00:47:07.180 --> 00:47:08.289
OK, what, I'm sorry.

00:47:08.289 --> 00:47:09.205
AUDIENCE: [INAUDIBLE]?

00:47:09.205 --> 00:47:17.396
 

00:47:17.396 --> 00:47:20.020
VICTOR POWELL: So it's on
GitHub if that's what you mean.

00:47:20.020 --> 00:47:21.060
It'll be after the talk.

00:47:21.060 --> 00:47:25.294
You can download all the demos
and the ones we went over.

00:47:25.294 --> 00:47:26.590
AUDIENCE: [INAUDIBLE]?

00:47:26.590 --> 00:47:29.610
VICTOR POWELL: Oh
yeah, I'm sorry.

00:47:29.610 --> 00:47:31.300
To repeat the question
he asked-- Oh,

00:47:31.300 --> 00:47:32.600
I don't need the mic.

00:47:32.600 --> 00:47:37.200
Just to repeat the
question, can I

00:47:37.200 --> 00:47:39.444
put up some of these
directives on GitHub?

00:47:39.444 --> 00:47:41.485
They will all be available
online after the talk.

00:47:41.485 --> 00:47:43.942
You can go and fork the
repo or make contributions.

00:47:43.942 --> 00:47:45.650
I know that some people
have been talking

00:47:45.650 --> 00:47:48.980
about putting together more
comprehensive, a collection

00:47:48.980 --> 00:47:51.690
of Angular and D3 directives,
and there are actually

00:47:51.690 --> 00:47:54.350
some already-- Brian,
actually, put together

00:47:54.350 --> 00:47:58.300
a great tutorial that
walks through all of this.

00:47:58.300 --> 00:48:02.780
But there are
alternatives like Dangle--

00:48:02.780 --> 00:48:05.425
I think Dangle, is
that the right--

00:48:05.425 --> 00:48:08.550
But I think a lot can be
done, and a lot of improvement

00:48:08.550 --> 00:48:09.480
can be made.

00:48:09.480 --> 00:48:11.984
So I mean I don't know if I
could stand up and volunteer

00:48:11.984 --> 00:48:13.400
to do that, but I
definitely think

00:48:13.400 --> 00:48:16.460
there's a lot of value that
could be added from doing that.

00:48:16.460 --> 00:48:19.240
 

00:48:19.240 --> 00:48:19.900
Next question.

00:48:19.900 --> 00:48:24.610
 

00:48:24.610 --> 00:48:27.160
AUDIENCE: So there appears to
be some overlap between what

00:48:27.160 --> 00:48:30.000
Angular can do and what D3 does.

00:48:30.000 --> 00:48:32.306
So, for example, I saw
the bar of the code that

00:48:32.306 --> 00:48:35.535
was in the link function was
creating elements in the Dom

00:48:35.535 --> 00:48:37.160
and applying style to them.

00:48:37.160 --> 00:48:39.170
And [INAUDIBLE] attributes.

00:48:39.170 --> 00:48:41.690
And it appears to
me that part of that

00:48:41.690 --> 00:48:43.880
can be created in
Angular templates,

00:48:43.880 --> 00:48:48.350
but we can add those repeated
G elements inside the template.

00:48:48.350 --> 00:48:50.890
So is it stuff that's been
tried are the advantages of this

00:48:50.890 --> 00:48:53.866
[INAUDIBLE] to do that?

00:48:53.866 --> 00:48:55.540
VICTOR POWELL:
--indicated doing so.

00:48:55.540 --> 00:48:58.360
I mean there's a million ways to
skin a cat, as the cliche goes.

00:48:58.360 --> 00:48:59.179
If that's a cliche.

00:48:59.179 --> 00:48:59.720
I don't know.

00:48:59.720 --> 00:49:02.242
 

00:49:02.242 --> 00:49:04.650
I prefer to use D3.

00:49:04.650 --> 00:49:07.094
It's where I have already
a lot of domain experience,

00:49:07.094 --> 00:49:08.510
and I'd like to
continue using it.

00:49:08.510 --> 00:49:10.780
But that's not to say
it's the only way.

00:49:10.780 --> 00:49:12.940
But I don't think D3 will
be able to be removed

00:49:12.940 --> 00:49:14.815
from the equation
completely, because I think

00:49:14.815 --> 00:49:17.690
it adds so much in terms of
additional functionality,

00:49:17.690 --> 00:49:20.370
helper functions that
transform your data in a very

00:49:20.370 --> 00:49:22.364
convenient way.

00:49:22.364 --> 00:49:23.780
BRAD GREEN: Victor,
we're actually

00:49:23.780 --> 00:49:26.321
going to hold off on Q&amp;A and do
a couple of lightening talks,

00:49:26.321 --> 00:49:28.980
and then do Q&amp;A with you,
Brian, Igor at the end.

00:49:28.980 --> 00:49:31.230
So Brian's going
to come up, and I

00:49:31.230 --> 00:49:34.430
think he's talking about
dependency injection.

00:49:34.430 --> 00:49:37.380
Is that right?

00:49:37.380 --> 00:49:40.795
So he'll be really
quick, like lightening.

00:49:40.795 --> 00:49:41.920
Look how fast he's walking.

00:49:41.920 --> 00:49:42.920
He's already lightening.

00:49:42.920 --> 00:50:13.740
 

00:50:13.740 --> 00:50:14.970
BRIAN FORD: Just a minute.

00:50:14.970 --> 00:50:15.800
So I'm Brian.

00:50:15.800 --> 00:50:18.650
I work at Google on
the Angular team,

00:50:18.650 --> 00:50:34.260
and I'm giving a
short talk about-- So

00:50:34.260 --> 00:50:36.260
this is going to be a
really, really short talk.

00:50:36.260 --> 00:50:38.830
 

00:50:38.830 --> 00:50:39.330
OK.

00:50:39.330 --> 00:50:43.630
So Angular uses DI, and
one of the cool things

00:50:43.630 --> 00:50:47.070
that you can do in DI,
or Dependency Injection,

00:50:47.070 --> 00:50:50.520
that you can get a
hold of some components

00:50:50.520 --> 00:50:54.530
and then modify it and
put it back in the system

00:50:54.530 --> 00:50:56.640
and let Angular do
its thing with it.

00:50:56.640 --> 00:50:59.890
So here I have a really
boring Angular app.

00:50:59.890 --> 00:51:04.300
It's just two forms, and
it cotinates together,

00:51:04.300 --> 00:51:05.520
their output.

00:51:05.520 --> 00:51:12.190
But what we can do is we can
use this configure function

00:51:12.190 --> 00:51:13.810
of an Angular module.

00:51:13.810 --> 00:51:15.860
We can ask for a dollar
provide, and dollar

00:51:15.860 --> 00:51:18.740
provide has this
method decorator where

00:51:18.740 --> 00:51:22.060
you can ask for a
scope-- or sorry.

00:51:22.060 --> 00:51:24.760
You can ask for some service,
so we can answer for,

00:51:24.760 --> 00:51:26.650
for instance, the root scope.

00:51:26.650 --> 00:51:31.630
It gives us this function
where whatever we return back,

00:51:31.630 --> 00:51:34.200
Angular will use
as the root scope.

00:51:34.200 --> 00:51:38.960
So what happens here is
dollar delegate is root scope.

00:51:38.960 --> 00:51:41.330
They're equal.

00:51:41.330 --> 00:51:44.814
And we can now change
root scope somehow.

00:51:44.814 --> 00:51:46.980
So what I'm going to do is
I have this little helper

00:51:46.980 --> 00:51:50.730
function that I wrote
down here called timerify.

00:51:50.730 --> 00:51:54.050
This takes a function and
returns a new function that

00:51:54.050 --> 00:51:57.110
first starts the timer, then
runs the original function,

00:51:57.110 --> 00:52:00.050
then stops the timer, and
then logs the amount of time

00:52:00.050 --> 00:52:04.150
it took to do whatever it was
that the original function was

00:52:04.150 --> 00:52:04.940
doing.

00:52:04.940 --> 00:52:09.450
So using this, we can actually
time dollar apply on the root

00:52:09.450 --> 00:52:13.375
scope, and we can see how
long the digest cycle takes,

00:52:13.375 --> 00:52:15.630
in effect.

00:52:15.630 --> 00:52:19.660
So let's see what this
actually looks like here.

00:52:19.660 --> 00:52:23.859
So if I refresh this, we see
10 milliseconds, type stuff in.

00:52:23.859 --> 00:52:24.775
Angular's pretty fast.

00:52:24.775 --> 00:52:27.970
 

00:52:27.970 --> 00:52:29.000
So that's kind of cool.

00:52:29.000 --> 00:52:30.600
And this is actually
the same trick

00:52:30.600 --> 00:52:33.890
that battering, the
Angular debugger extension

00:52:33.890 --> 00:52:37.300
uses to get into Angular
internals and mess

00:52:37.300 --> 00:52:38.660
around with it.

00:52:38.660 --> 00:52:41.100
So that's actually
the whole talk,

00:52:41.100 --> 00:52:44.990
the code and the short
explanation is on GitHub,

00:52:44.990 --> 00:52:48.110
btford/-- Brian talks
about decorators,

00:52:48.110 --> 00:52:49.970
doesn't he in the repo?

00:52:49.970 --> 00:52:52.307
And that's it.

00:52:52.307 --> 00:52:54.303
[APPLAUSE]

00:52:54.303 --> 00:54:03.114
 

00:54:03.114 --> 00:54:04.280
IGOR MINAR: So hi everybody.

00:54:04.280 --> 00:54:05.060
My name is Igor.

00:54:05.060 --> 00:54:06.230
I'm from the Angular team.

00:54:06.230 --> 00:54:08.076
And what I would
like to talk to you

00:54:08.076 --> 00:54:12.050
about is about the process
we use to handle PRs,

00:54:12.050 --> 00:54:14.870
and kind of demystify what
is happening when you send us

00:54:14.870 --> 00:54:19.000
a PR, and how is
it being handled.

00:54:19.000 --> 00:54:21.110
So you work on the
Angular application,

00:54:21.110 --> 00:54:24.230
and unfortunately,
you come across a bug.

00:54:24.230 --> 00:54:28.110
Maybe it looks uglier than
this one, or in a better case,

00:54:28.110 --> 00:54:31.308
you have an idea on how
to make Angular better.

00:54:31.308 --> 00:54:33.180
Way better.

00:54:33.180 --> 00:54:36.940
And naturally, you go
to GitHub, and what you

00:54:36.940 --> 00:54:39.915
notice there is that
Octocat has only five legs.

00:54:39.915 --> 00:54:42.830
Like I drew eight, because
I thought Octocat, eight,

00:54:42.830 --> 00:54:44.360
but it has only five.

00:54:44.360 --> 00:54:47.100
Go to GitHub and check it.

00:54:47.100 --> 00:54:50.530
You fork the project,
you craft your change,

00:54:50.530 --> 00:54:52.110
and you send us a PR.

00:54:52.110 --> 00:54:55.410
And then you notice that
the PR lands in our queue,

00:54:55.410 --> 00:54:57.810
and there is like a
million other PRs there.

00:54:57.810 --> 00:55:00.200
And you start to
wonder what's going on.

00:55:00.200 --> 00:55:02.380
Do these people
handle those PRs?

00:55:02.380 --> 00:55:04.070
Does anybody ever look at them?

00:55:04.070 --> 00:55:06.200
Well, the good news is that
we are looking at them.

00:55:06.200 --> 00:55:07.741
But there are so
many of them that we

00:55:07.741 --> 00:55:09.972
have to develop the process
on how to handle them.

00:55:09.972 --> 00:55:11.930
And I'm going to talk to
you about this process

00:55:11.930 --> 00:55:13.280
a little bit.

00:55:13.280 --> 00:55:16.150
So step one of the process
is you sending us the PR.

00:55:16.150 --> 00:55:17.690
We covered this already.

00:55:17.690 --> 00:55:24.150
The PR lands in our queue and
there's a brand new shiny PR.

00:55:24.150 --> 00:55:25.740
The next step is triage.

00:55:25.740 --> 00:55:31.250
So what we do is once a
day, we sit around a table

00:55:31.250 --> 00:55:32.980
and all of us just
hammer on GitHub

00:55:32.980 --> 00:55:35.950
and look at the new stuff
that just showed up,

00:55:35.950 --> 00:55:39.660
all the new issues, all
the comments, all the PRs,

00:55:39.660 --> 00:55:41.710
and try to triage them.

00:55:41.710 --> 00:55:44.210
During the triage,
we review things.

00:55:44.210 --> 00:55:47.280
We try to reproduce
bugs or try to reproduce

00:55:47.280 --> 00:55:49.980
the bugs you're trying to fix.

00:55:49.980 --> 00:55:52.480
Label things into categories
so that we have a better

00:55:52.480 --> 00:55:54.840
understanding of what is it
that you're trying to do,

00:55:54.840 --> 00:55:58.350
and what the change is about.

00:55:58.350 --> 00:56:01.050
And then we move
things to milestones,

00:56:01.050 --> 00:56:06.117
just so that we schedule when
we're going to deal with this.

00:56:06.117 --> 00:56:07.200
What these milestones are?

00:56:07.200 --> 00:56:10.160
Well, ideally we try to
merge things instantly.

00:56:10.160 --> 00:56:13.337
But it's not that
common that the change

00:56:13.337 --> 00:56:14.670
is ready to be instantly merged.

00:56:14.670 --> 00:56:17.890
And it's going to be
obvious why in a little bit.

00:56:17.890 --> 00:56:20.620
So it's more common that if
it's an important backfix,

00:56:20.620 --> 00:56:22.320
we schedule it for
the current iteration

00:56:22.320 --> 00:56:24.070
or for the next iteration.

00:56:24.070 --> 00:56:26.810
Otherwise, it goes into
a midterm milestone,

00:56:26.810 --> 00:56:30.394
which we pull things out
during our iteration planning.

00:56:30.394 --> 00:56:32.560
If we don't have enough
information about what is it

00:56:32.560 --> 00:56:35.880
that you are trying to
do, or if it's an issue

00:56:35.880 --> 00:56:38.000
and it's not clear
what the issue is,

00:56:38.000 --> 00:56:40.410
we have a milestone
called purgatory

00:56:40.410 --> 00:56:43.700
in which we try to gather
more information before we

00:56:43.700 --> 00:56:46.590
decide what to do
with the issue.

00:56:46.590 --> 00:56:48.550
If the pull request is
trying to do something

00:56:48.550 --> 00:56:51.260
that we are not
interested in just yet,

00:56:51.260 --> 00:56:53.450
and we know that it's
going to take a lot of work

00:56:53.450 --> 00:56:57.000
to get it into the master,
we put into ice box.

00:56:57.000 --> 00:57:00.440
And hopefully, we'll
some time get to it.

00:57:00.440 --> 00:57:04.780
I'm not sure when, but we
have this milestone because we

00:57:04.780 --> 00:57:08.490
try not to reject PRs
that seem to be valid,

00:57:08.490 --> 00:57:10.155
but they are just
not quite there yet

00:57:10.155 --> 00:57:12.950
and won't be for a long time.

00:57:12.950 --> 00:57:14.020
So Pro tip number one.

00:57:14.020 --> 00:57:17.060
If you are sending us a
PR, aim for instant merge.

00:57:17.060 --> 00:57:18.570
What does this mean?

00:57:18.570 --> 00:57:20.160
Ideally, it should be a backfix.

00:57:20.160 --> 00:57:23.390
It should be a small change
with good test coverage.

00:57:23.390 --> 00:57:25.240
You should sign the CLA.

00:57:25.240 --> 00:57:28.500
There is a script that bugs
you if you don't sign the CLA,

00:57:28.500 --> 00:57:31.560
and the CLA process
is super simple.

00:57:31.560 --> 00:57:35.210
And it should be obviously
what you are trying to fix.

00:57:35.210 --> 00:57:37.960
Write a good description,
write a good comment message.

00:57:37.960 --> 00:57:43.210
These are the best changes that
we can easily get into master.

00:57:43.210 --> 00:57:45.120
If we can do an
instant merge, then

00:57:45.120 --> 00:57:47.170
during iteration
planning we schedule

00:57:47.170 --> 00:57:50.680
the PR to be handled
during the week.

00:57:50.680 --> 00:57:53.640
And during the week we
review it more thoroughly.

00:57:53.640 --> 00:57:56.940
We provide more feedback on
what is it that it needs.

00:57:56.940 --> 00:57:59.110
And either wait for you
to make the changes,

00:57:59.110 --> 00:58:03.410
or we make changes ourselves
and merge the change in.

00:58:03.410 --> 00:58:07.470
This is done after all of
our check boxes are checked.

00:58:07.470 --> 00:58:09.650
The tests have to be
there, the documentation

00:58:09.650 --> 00:58:12.080
needs to be updated
if necessary.

00:58:12.080 --> 00:58:14.130
We need the CLA, and
many other things.

00:58:14.130 --> 00:58:17.200
All of these requirements are
upline in the contributing

00:58:17.200 --> 00:58:18.040
documents.

00:58:18.040 --> 00:58:20.400
So this is on GitHub
contributing.md.

00:58:20.400 --> 00:58:22.820
You can check it out.

00:58:22.820 --> 00:58:23.864
Pro tip number two.

00:58:23.864 --> 00:58:25.530
If you're making a
big change and you're

00:58:25.530 --> 00:58:28.630
going to spend a lot of
time crafting this PR,

00:58:28.630 --> 00:58:31.130
please open an issue first.

00:58:31.130 --> 00:58:33.530
This will allow us to
look at it and give you

00:58:33.530 --> 00:58:37.220
instant feedback, if it even
makes sense to send us a PR.

00:58:37.220 --> 00:58:41.890
Often people send us PRs, and
they don't belong to the core.

00:58:41.890 --> 00:58:44.860
We want the core to stay
focused on the things

00:58:44.860 --> 00:58:48.810
that only core can provide, and
all this nice-to-have features,

00:58:48.810 --> 00:58:50.630
we provided it
through extra modules.

00:58:50.630 --> 00:58:52.216
So, if you have
something in mind

00:58:52.216 --> 00:58:54.340
and you know that it's
going to take a lot of time,

00:58:54.340 --> 00:58:57.350
create an issue first.

00:58:57.350 --> 00:58:58.910
Step four, done.

00:58:58.910 --> 00:59:01.030
At least you think
you're done, but the PR

00:59:01.030 --> 00:59:03.490
is far from being done.

00:59:03.490 --> 00:59:06.050
Step four is actually
continuous integration.

00:59:06.050 --> 00:59:11.900
By now, we ran
your tests already,

00:59:11.900 --> 00:59:14.620
because Travis--
we have this set up

00:59:14.620 --> 00:59:17.030
with Travis that will
run the tests whenever

00:59:17.030 --> 00:59:18.490
you submit the PR.

00:59:18.490 --> 00:59:20.650
But once we merge,
we run the test

00:59:20.650 --> 00:59:23.440
one more time just to send it
and make sure that everything's

00:59:23.440 --> 00:59:25.160
OK, no tests are being broken.

00:59:25.160 --> 00:59:27.100
We actually currently
run two set ups.

00:59:27.100 --> 00:59:30.090
We have Jenkins on
our own CI server.

00:59:30.090 --> 00:59:32.370
And we have Travis
with [INAUDIBLE] Labs

00:59:32.370 --> 00:59:34.860
that seems-- like
that's something

00:59:34.860 --> 00:59:37.470
that we're trying to
completely migrate to.

00:59:37.470 --> 00:59:42.330
But it's a complicated set
up, and to right now, we

00:59:42.330 --> 00:59:47.690
run both just to be sure that we
are not without the CI server.

00:59:47.690 --> 00:59:50.330
But hopefully, everything's
going to go well.

00:59:50.330 --> 00:59:53.590
And we get step five,
continuous delivery.

00:59:53.590 --> 00:59:55.360
Not many people know about this.

00:59:55.360 --> 00:59:59.080
But what happens is when the
change gets merged into master,

00:59:59.080 --> 01:00:02.800
we create a build and
we push the changes

01:00:02.800 --> 01:00:04.080
to the recommendation side.

01:00:04.080 --> 01:00:07.090
So if you are making changes
to the documentation,

01:00:07.090 --> 01:00:08.780
those changes will
be available right

01:00:08.780 --> 01:00:10.320
after the change is merged.

01:00:10.320 --> 01:00:13.100
We want this so that people
can benefit from documentation

01:00:13.100 --> 01:00:16.010
changes as soon as
they land in master,

01:00:16.010 --> 01:00:19.470
so that they don't have
to wait for a release.

01:00:19.470 --> 01:00:22.930
Another thing that we also do
is once a build is created,

01:00:22.930 --> 01:00:24.130
we push it to bower.

01:00:24.130 --> 01:00:27.810
We want people to start using
the bleeding edge of Angular

01:00:27.810 --> 01:00:32.265
more, and that's why we push
to bower after every comment.

01:00:32.265 --> 01:00:34.071
So every comment
that lands in master,

01:00:34.071 --> 01:00:35.570
we create a build
out of it, we push

01:00:35.570 --> 01:00:39.860
it to bower with a pre-release
[INAUDIBLE] version,

01:00:39.860 --> 01:00:43.896
and you can fetch it very
easily and start using it.

01:00:43.896 --> 01:00:45.270
This is not as
crazy as it sounds

01:00:45.270 --> 01:00:48.910
because this is what we
do at Google already.

01:00:48.910 --> 01:00:52.770
We take every comment
that lands in master,

01:00:52.770 --> 01:00:55.350
we sync it into
Google, and we run it

01:00:55.350 --> 01:01:00.440
against all of the applications
that use Angular at Google.

01:01:00.440 --> 01:01:03.960
This gives us very fast
feedback on whether there

01:01:03.960 --> 01:01:06.570
is a breaking
change, or basically,

01:01:06.570 --> 01:01:07.810
if everything's fine.

01:01:07.810 --> 01:01:10.110
And if everything
is fine, then we

01:01:10.110 --> 01:01:13.030
sync this change into the
internal repository, where

01:01:13.030 --> 01:01:16.170
within a few hours, all of
applications will pick it up

01:01:16.170 --> 01:01:18.765
and will start to use it,
some even in production.

01:01:18.765 --> 01:01:21.440
 

01:01:21.440 --> 01:01:23.120
Pro tip number three.

01:01:23.120 --> 01:01:25.550
Aim for greatest coverage.

01:01:25.550 --> 01:01:27.980
The sooner we can
discover issues,

01:01:27.980 --> 01:01:31.050
the sooner we can
fix them and can

01:01:31.050 --> 01:01:33.949
avoid issues in a
later phase, which

01:01:33.949 --> 01:01:36.240
would mean like we wouldn't
have to revert the comment,

01:01:36.240 --> 01:01:38.470
or fight those fires.

01:01:38.470 --> 01:01:41.550
So if we have a good coverage
for all of the changes,

01:01:41.550 --> 01:01:45.090
this can avoid a lot of
hassle later in the process.

01:01:45.090 --> 01:01:46.280
Pro tip number four.

01:01:46.280 --> 01:01:47.760
Be mindful of breaking changes.

01:01:47.760 --> 01:01:49.720
Like during stable
releases, we really

01:01:49.720 --> 01:01:51.120
don't want breaking changes.

01:01:51.120 --> 01:01:53.890
And if we see that something
has a breaking change,

01:01:53.890 --> 01:01:55.330
it's not going to make it in.

01:01:55.330 --> 01:02:00.280
We have an unstable branch
which will be opening for 1 to 3

01:02:00.280 --> 01:02:00.910
very soon.

01:02:00.910 --> 01:02:03.040
And we have a
process for handling

01:02:03.040 --> 01:02:04.450
these breaking changes.

01:02:04.450 --> 01:02:09.830
But most commonly, we just
don't want breaking changes.

01:02:09.830 --> 01:02:11.800
Step number six is at release.

01:02:11.800 --> 01:02:15.210
During the release, we
generate a change log.

01:02:15.210 --> 01:02:17.450
And the way we generate
it, we take the comment

01:02:17.450 --> 01:02:21.410
messages that landed in-- from
comments that land in master,

01:02:21.410 --> 01:02:23.410
and we have a script that
will just generate it.

01:02:23.410 --> 01:02:27.930
This is why we have this pretty
strict format for the comment

01:02:27.930 --> 01:02:30.289
messages, so that we can
just generate the change

01:02:30.289 --> 01:02:32.830
log, because otherwise, it's so
much hassle to create release

01:02:32.830 --> 01:02:34.538
notes for every release,
especially if we

01:02:34.538 --> 01:02:37.070
are trying to
release once a week.

01:02:37.070 --> 01:02:38.690
Pro tip number five.

01:02:38.690 --> 01:02:41.450
When you write a comment
message, write it in a way

01:02:41.450 --> 01:02:44.790
that you would love
to read it, or you

01:02:44.790 --> 01:02:47.140
would love others to read it.

01:02:47.140 --> 01:02:52.910
This means describe the fix or
the issue that you are doing.

01:02:52.910 --> 01:02:59.130
If it's a feature, make sure
you describe what it does.

01:02:59.130 --> 01:03:01.840
But provide more in-depth
explanation probably

01:03:01.840 --> 01:03:06.160
in the documentation that
is associated with the PR.

01:03:06.160 --> 01:03:09.640
Next thing we do is we push
the bits to code AngularJS.

01:03:09.640 --> 01:03:10.800
This is just an archive.

01:03:10.800 --> 01:03:11.890
It's not a CDN.

01:03:11.890 --> 01:03:16.430
I often see people use the
code AngularJS in flunkers

01:03:16.430 --> 01:03:18.730
and and JS fiddles.

01:03:18.730 --> 01:03:21.510
Use the CDN URL better.

01:03:21.510 --> 01:03:25.920
This is really meant just for
an archive, and it's not a CDN,

01:03:25.920 --> 01:03:28.100
but it contains
all the artifacts,

01:03:28.100 --> 01:03:30.170
including the documentation.

01:03:30.170 --> 01:03:32.590
So if you want to see what
the documentation looks

01:03:32.590 --> 01:03:35.510
like at some version, you
can go there and see it.

01:03:35.510 --> 01:03:38.150
 

01:03:38.150 --> 01:03:41.560
Next what we do is we take all
the build artifacts and push

01:03:41.560 --> 01:03:46.300
them to bower, this time with
the proper release versions

01:03:46.300 --> 01:03:49.850
so that you get whatever
Angular 1 through 9,

01:03:49.850 --> 01:03:52.320
or whatever it is
that we are releasing.

01:03:52.320 --> 01:03:55.700
And we also push the
artifacts to Google CDN

01:03:55.700 --> 01:04:00.610
so that you can get them to
clients as soon as possible.

01:04:00.610 --> 01:04:01.790
We have Angular-seed.

01:04:01.790 --> 01:04:04.580
We push the bits
in there, and we

01:04:04.580 --> 01:04:06.360
have the tutorial which
we keep up-to-day,

01:04:06.360 --> 01:04:09.640
so we also update
that on every release.

01:04:09.640 --> 01:04:10.420
And that's it.

01:04:10.420 --> 01:04:13.550
Like now your PR is in
Angular, it made it better,

01:04:13.550 --> 01:04:14.920
and we are very thankful.

01:04:14.920 --> 01:04:16.580
And we are hoping
that you're going

01:04:16.580 --> 01:04:19.860
to send us more PRs that
are really high quality.

01:04:19.860 --> 01:04:20.692
Thank you.

01:04:20.692 --> 01:04:28.730
[APPLAUSE]

01:04:28.730 --> 01:04:31.660
So I think we're going
do Q&amp;A now, right?

01:04:31.660 --> 01:04:34.480
And one more announcement.

01:04:34.480 --> 01:04:37.450
We have a bunch of food left
over, and we have boxes,

01:04:37.450 --> 01:04:40.530
so if you want to take some food
home, feel free to take some.

01:04:40.530 --> 01:04:43.830
 

01:04:43.830 --> 01:04:45.510
Yeah, we'll take questions now.

01:04:45.510 --> 01:04:47.815
Victor and Brian.

01:04:47.815 --> 01:04:58.390
 

01:04:58.390 --> 01:04:58.890
Sorry.

01:04:58.890 --> 01:05:30.210
 

01:05:30.210 --> 01:05:32.360
AUDIENCE: Hey, thanks
for all the talks guys.

01:05:32.360 --> 01:05:34.570
Quick question for Brian.

01:05:34.570 --> 01:05:38.140
Can I use your decorator
for route provider

01:05:38.140 --> 01:05:41.176
and do something on
[INAUDIBLE] change?

01:05:41.176 --> 01:05:42.696
Get a hold of
providers, can you?

01:05:42.696 --> 01:05:45.270
 

01:05:45.270 --> 01:05:47.140
IGOR MINAR: Get hold
of providers, no.

01:05:47.140 --> 01:05:49.530
The providers are available
only during the run phase.

01:05:49.530 --> 01:05:52.520
 

01:05:52.520 --> 01:05:54.810
But for run changes,
we have events.

01:05:54.810 --> 01:05:58.360
You can listen on run, change,
start event, and just handle

01:05:58.360 --> 01:06:00.810
whatever you need to do there.

01:06:00.810 --> 01:06:03.980
AUDIENCE: This is in line with
my question from last Meetup.

01:06:03.980 --> 01:06:05.910
On every oil change
I want to select

01:06:05.910 --> 01:06:09.440
kill all the Ajax sequence
from the previous page,

01:06:09.440 --> 01:06:11.430
and kill the timers,
and all that.

01:06:11.430 --> 01:06:14.360
So I was wondering if this could
be just a decorator that no one

01:06:14.360 --> 01:06:14.930
else has to--

01:06:14.930 --> 01:06:19.269
 

01:06:19.269 --> 01:06:20.060
BRIAN FORD: Oh, OK.

01:06:20.060 --> 01:06:22.480
Oh.

01:06:22.480 --> 01:06:25.460
AUDIENCE: Well, I'll
continue with the events.

01:06:25.460 --> 01:06:29.265
But I was hoping this was
handled without anyone else

01:06:29.265 --> 01:06:30.960
having to do anything.

01:06:30.960 --> 01:06:31.460
Thank you.

01:06:31.460 --> 01:06:39.104
 

01:06:39.104 --> 01:06:40.020
AUDIENCE: [INAUDIBLE].

01:06:40.020 --> 01:06:41.890
I just want you if
there is a couple

01:06:41.890 --> 01:06:45.510
more ways to make sure what
I'm doing is sufficient.

01:06:45.510 --> 01:06:49.110
More often than not, I see that
I put a console log statement,

01:06:49.110 --> 01:06:51.590
I see too many things
coming up late.

01:06:51.590 --> 01:06:57.855
Am I doing something might
reduce efficiency or something?

01:06:57.855 --> 01:07:00.230
BRIAN FORD: Often, when you're
trying to debug something,

01:07:00.230 --> 01:07:00.729
you see--

01:07:00.729 --> 01:07:03.967
 

01:07:03.967 --> 01:07:05.675
AUDIENCE: Yeah, let's
say, for example, I

01:07:05.675 --> 01:07:10.450
was writing a validation event,
and then I see that-- Yeah.

01:07:10.450 --> 01:07:15.790
Is it watching on too
many changes or no?

01:07:15.790 --> 01:07:20.064
BRIAN FORD: We are working on
better tools to answer that.

01:07:20.064 --> 01:07:23.387
I agree, right now it's not
easy to diagnosis, for instance,

01:07:23.387 --> 01:07:25.872
why is something slow.

01:07:25.872 --> 01:07:27.860
We're working on it.

01:07:27.860 --> 01:07:32.030
And you can use techniques like
that to count how many times.

01:07:32.030 --> 01:07:35.630
 

01:07:35.630 --> 01:07:39.470
You wouldn't use-- decorator
is more like of like a system.

01:07:39.470 --> 01:07:42.316
This you would probably
want [INAUDIBLE].

01:07:42.316 --> 01:07:45.280
Louder?

01:07:45.280 --> 01:07:45.820
There we go.

01:07:45.820 --> 01:07:47.820
I'll just steal this.

01:07:47.820 --> 01:07:49.970
So if you want to
answer the question

01:07:49.970 --> 01:07:52.590
of is a specific
watcher slow, you

01:07:52.590 --> 01:07:54.436
could use a similar
technique where

01:07:54.436 --> 01:07:55.810
you're instrumenting
the function

01:07:55.810 --> 01:07:58.190
and adding, and
stopping a timer.

01:07:58.190 --> 01:08:03.470
But this technique
of using decorator

01:08:03.470 --> 01:08:05.070
is more for like
system-wide changes.

01:08:05.070 --> 01:08:07.220
Like if you want
to change something

01:08:07.220 --> 01:08:11.680
in the entire DI system
inside of Angular.

01:08:11.680 --> 01:08:13.590
Right now, it's perhaps
a little bit hard

01:08:13.590 --> 01:08:16.180
to kind of drill down and
decide which things are useful.

01:08:16.180 --> 01:08:18.925
But we're working on better
tools for that as well.

01:08:18.925 --> 01:08:19.697
AUDIENCE: Thanks.

01:08:19.697 --> 01:08:20.405
BRIAN FORD: Sure.

01:08:20.405 --> 01:08:36.140
 

01:08:36.140 --> 01:08:38.210
AUDIENCE: My
question's about D3.

01:08:38.210 --> 01:08:40.520
So donut chart is
really cool, and you

01:08:40.520 --> 01:08:42.420
can make as many donut
charts as you want,

01:08:42.420 --> 01:08:43.779
and you can resize them.

01:08:43.779 --> 01:08:47.313
What is your preferred method
for testing your D3 directives,

01:08:47.313 --> 01:08:49.729
because they can overlap, they
might not update with data.

01:08:49.729 --> 01:08:52.072
A lot of things
could happen to them.

01:08:52.072 --> 01:08:53.655
VICTOR POWELL: That's
a good question,

01:08:53.655 --> 01:08:58.229
and it's a hard one to answer,
but currently my CI environment

01:08:58.229 --> 01:08:59.510
is my eyeballs.

01:08:59.510 --> 01:09:04.319
 

01:09:04.319 --> 01:09:10.140
For UI, it's very hard to
come up with good testing,

01:09:10.140 --> 01:09:11.590
in my opinion.

01:09:11.590 --> 01:09:14.020
Maybe there could be better
tools or better tools

01:09:14.020 --> 01:09:15.620
that I could become
more aware of.

01:09:15.620 --> 01:09:18.529
But it's easier for me to just
get immediate feedback just

01:09:18.529 --> 01:09:20.510
from seeing if it
works or it doesn't.

01:09:20.510 --> 01:09:24.359
 

01:09:24.359 --> 01:09:28.220
IGOR MINAR: I came across an
interesting tool called Huxley,

01:09:28.220 --> 01:09:33.220
which is a web driver-based
testing framework.

01:09:33.220 --> 01:09:35.930
And what it does, it take
screenshots and compares them,

01:09:35.930 --> 01:09:41.149
so that you can use that
for testing UI stuff.

01:09:41.149 --> 01:09:42.819
And actually, like
it sounds crazy,

01:09:42.819 --> 01:09:46.180
but the more I think about
it, it's pretty cool.

01:09:46.180 --> 01:09:48.370
Like Huxley, check it out.

01:09:48.370 --> 01:09:50.930
Huxley, yeah.

01:09:50.930 --> 01:09:54.340
I think it's done by Facebook.

01:09:54.340 --> 01:09:56.840
BRIAN FORD: So it's pretty
easy to test to things

01:09:56.840 --> 01:09:59.710
like does this have a
given width or height

01:09:59.710 --> 01:10:01.347
or some certain property.

01:10:01.347 --> 01:10:03.930
But really, if you want to test
that something doesn't overlap

01:10:03.930 --> 01:10:05.990
or something that
really looks like that,

01:10:05.990 --> 01:10:08.840
tools that take screenshots and
[INAUDIBLE] them, or really,

01:10:08.840 --> 01:10:09.726
I think, the only--

01:10:09.726 --> 01:10:11.350
AUDIENCE: Well, the
way this tool works

01:10:11.350 --> 01:10:14.010
is that you take a screenshot
that you're happy with,

01:10:14.010 --> 01:10:16.500
and then you take it every
time you make changes.

01:10:16.500 --> 01:10:17.255
BRIAN FORD: Right.

01:10:17.255 --> 01:10:17.700
Yeah, precisely.

01:10:17.700 --> 01:10:19.408
AUDIENCE: And when
there is a change that

01:10:19.408 --> 01:10:21.130
doesn't match the
original screenshot,

01:10:21.130 --> 01:10:23.120
then it's something
that you should look at.

01:10:23.120 --> 01:10:25.820
And the new updates
of the screenshot's

01:10:25.820 --> 01:10:28.460
a part of the review process.

01:10:28.460 --> 01:10:30.430
So check it out.

01:10:30.430 --> 01:10:31.149
It's pretty cool.

01:10:31.149 --> 01:10:32.190
BRIAN FORD: I've seen it.

01:10:32.190 --> 01:10:34.020
And there are similar
tools, though,

01:10:34.020 --> 01:10:36.394
like it's not a new idea.

01:10:36.394 --> 01:10:38.810
But you can do something like
that in your CI environment.

01:10:38.810 --> 01:10:40.080
So that way you
still would catch

01:10:40.080 --> 01:10:41.163
those sort of regressions.

01:10:41.163 --> 01:10:45.580
 

01:10:45.580 --> 01:10:50.470
AUDIENCE: Huxley, yeah, with H.

01:10:50.470 --> 01:10:53.001
AUDIENCE: A question
about data feeds.

01:10:53.001 --> 01:10:54.999
I'm still kind of
new to Angular,

01:10:54.999 --> 01:10:56.540
and one thing that
I learned early on

01:10:56.540 --> 01:10:59.670
is this idea of a promise,
where basically you've

01:10:59.670 --> 01:11:04.800
got some data out there and
it'll come sooner or later.

01:11:04.800 --> 01:11:06.730
Should I use Angular
functionality

01:11:06.730 --> 01:11:10.140
to deal with data that might
be coming sooner or later,

01:11:10.140 --> 01:11:12.640
or should I rely
maybe more on D3,

01:11:12.640 --> 01:11:15.510
assuming D3 has
that functionality

01:11:15.510 --> 01:11:20.320
to deal with data which might
be coming sooner or later.

01:11:20.320 --> 01:11:21.460
BRIAN FORD: Or never.

01:11:21.460 --> 01:11:23.381
AUDIENCE: Or never.

01:11:23.381 --> 01:11:24.480
IGOR MINAR: I don't know.

01:11:24.480 --> 01:11:28.410
I don't know if D3 has promises.

01:11:28.410 --> 01:11:30.160
VICTOR POWELL: Mostly,
that's an issue

01:11:30.160 --> 01:11:33.150
of getting your data before it
goes into the visualization.

01:11:33.150 --> 01:11:36.100
And even though D3 does
offer a suite of utilities

01:11:36.100 --> 01:11:39.850
for making that easier,
like D3.CSV and TSV,

01:11:39.850 --> 01:11:44.890
I would recommend pulling all of
your data in through a service,

01:11:44.890 --> 01:11:46.640
and then using that
inside the controller,

01:11:46.640 --> 01:11:50.460
and then setting the data
you got from the service

01:11:50.460 --> 01:11:53.509
on the controller, on the scope,
and then your D3 directives

01:11:53.509 --> 01:11:54.550
will just plug into that.

01:11:54.550 --> 01:11:56.256
So your D3 directives
shouldn't care

01:11:56.256 --> 01:11:57.630
where they're
getting their data.

01:11:57.630 --> 01:11:59.269
Just that they have data.

01:11:59.269 --> 01:11:59.810
AUDIENCE: OK.

01:11:59.810 --> 01:12:00.310
Thanks.

01:12:00.310 --> 01:12:09.880
 

01:12:09.880 --> 01:12:13.100
AUDIENCE: This is a
question for Victor.

01:12:13.100 --> 01:12:16.420
Your comment about there's
many ways to skin a cat.

01:12:16.420 --> 01:12:19.540
Just thinking that I'm more
familiar with Angular than D3,

01:12:19.540 --> 01:12:22.980
but it's clear that
there is overlap

01:12:22.980 --> 01:12:25.650
in the kind of binding
area and things like that.

01:12:25.650 --> 01:12:29.350
And you said you came from
your domain-specific kind

01:12:29.350 --> 01:12:32.980
of knowledge, that you went
more with the D3 route.

01:12:32.980 --> 01:12:35.420
Have you run across
anything where

01:12:35.420 --> 01:12:40.220
maybe in blending
the two together

01:12:40.220 --> 01:12:46.090
it overrode your domain dominant
mode of working, where you

01:12:46.090 --> 01:12:49.290
found, perhaps, for stylistic
or performance reasons

01:12:49.290 --> 01:12:50.890
there was a good
reason to change

01:12:50.890 --> 01:12:53.162
the way that you were working?

01:12:53.162 --> 01:12:54.620
VICTOR POWELL: I
haven't really run

01:12:54.620 --> 01:12:57.150
into too many issues like that.

01:12:57.150 --> 01:13:00.340
I feel as long as
you do a, if you're

01:13:00.340 --> 01:13:02.700
very explicit about
keeping the boundaries,

01:13:02.700 --> 01:13:04.600
that whatever goes
inside of your directive,

01:13:04.600 --> 01:13:09.932
your visualization directive
should only be related to D3,

01:13:09.932 --> 01:13:11.390
then you don't
really have to worry

01:13:11.390 --> 01:13:13.580
about them clashing too heavily.

01:13:13.580 --> 01:13:30.086
 

01:13:30.086 --> 01:13:32.870
AUDIENCE: And again,
just more on D3.

01:13:32.870 --> 01:13:35.064
Did you look at other
things that are out there,

01:13:35.064 --> 01:13:36.730
or how do you compare
it to other things

01:13:36.730 --> 01:13:40.890
that are out there,
and why D3 versus--

01:13:40.890 --> 01:13:43.510
VICTOR POWELL: So the
good thing about all

01:13:43.510 --> 01:13:46.810
of what I just showed you is
that you can replace the D3

01:13:46.810 --> 01:13:48.436
parts with whatever you'd like.

01:13:48.436 --> 01:13:50.560
You could manipulate the
Dom directly if you really

01:13:50.560 --> 01:13:53.840
wanted to, but I would
advise against it,

01:13:53.840 --> 01:13:57.710
and instead using
a library like D3.

01:13:57.710 --> 01:14:01.000
But it's not the only one out
there that does what it does.

01:14:01.000 --> 01:14:03.100
So you're free to use
whatever you'd like.

01:14:03.100 --> 01:14:06.882
My personal bias is towards D3.

01:14:06.882 --> 01:14:07.465
AUDIENCE: Why?

01:14:07.465 --> 01:14:10.140
 

01:14:10.140 --> 01:14:13.550
VICTOR POWELL: Just because
with D3 I can write less code,

01:14:13.550 --> 01:14:15.540
and code that I can
come back to later

01:14:15.540 --> 01:14:17.524
and have a pretty good
understanding of what

01:14:17.524 --> 01:14:18.190
I wrote earlier.

01:14:18.190 --> 01:14:20.385
 

01:14:20.385 --> 01:14:21.760
BRIAN FORD: I
would say one thing

01:14:21.760 --> 01:14:26.840
that I think D3 does better than
similar like SVG libraries is

01:14:26.840 --> 01:14:33.130
that it has concepts that
compose together well.

01:14:33.130 --> 01:14:37.370
Whereas other libraries are
more draw me a bar chart.

01:14:37.370 --> 01:14:39.317
D3 gives you kind of
these different layouts

01:14:39.317 --> 01:14:40.900
and these things and
lets you build up

01:14:40.900 --> 01:14:42.691
something complicated
out of smaller parts.

01:14:42.691 --> 01:14:45.820
 

01:14:45.820 --> 01:14:49.120
VICTOR POWELL: I like to think
about it as a meta library.

01:14:49.120 --> 01:14:55.860
I wouldn't use it to just give
you an existing bar chart.

01:14:55.860 --> 01:15:02.310
You would-- [AUDIO DROP]

01:15:02.310 --> 01:15:04.630
AUDIENCE: So I have a
question for Victor.

01:15:04.630 --> 01:15:06.890
I was wondering,
I'm a big fan of D3,

01:15:06.890 --> 01:15:09.270
but have you found
any limitations

01:15:09.270 --> 01:15:12.720
in using Angular for D3?

01:15:12.720 --> 01:15:15.850
And then my second
question is using Angular,

01:15:15.850 --> 01:15:17.860
do you still find
it's necessary to use

01:15:17.860 --> 01:15:19.640
NVD3 to have it modularized?

01:15:19.640 --> 01:15:24.327
 

01:15:24.327 --> 01:15:25.910
VICTOR POWELL: Can
you say that again?

01:15:25.910 --> 01:15:28.620
 

01:15:28.620 --> 01:15:32.460
AUDIENCE: So have you found
any limitations with using D3?

01:15:32.460 --> 01:15:36.840
So did you have the full suite
of D3 library available to you?

01:15:36.840 --> 01:15:42.040
And then second question is
there's NVD3 JS, which makes it

01:15:42.040 --> 01:15:44.540
so that you can
modularize your D3.

01:15:44.540 --> 01:15:47.090
Do you find that Angular
allows you the ability

01:15:47.090 --> 01:15:51.116
to modularize without
the need of NVD3?

01:15:51.116 --> 01:15:52.990
VICTOR POWELL: I would
say-- I don't actually

01:15:52.990 --> 01:15:55.960
have a whole lot of
experience with NVD3.

01:15:55.960 --> 01:16:00.400
I prefer to have
more flexibility,

01:16:00.400 --> 01:16:04.890
so I tend to avoid libraries,
like NVD3, or what have you,

01:16:04.890 --> 01:16:08.640
or any other sort of collection
of existing D3 libraries.

01:16:08.640 --> 01:16:11.420
When I want to use
D3, it's not because I

01:16:11.420 --> 01:16:12.760
need a bar chart or pie chart.

01:16:12.760 --> 01:16:14.218
It's because I want
to do something

01:16:14.218 --> 01:16:15.800
that hasn't been done yet.

01:16:15.800 --> 01:16:20.730
So it's not really a
problem I can address.

01:16:20.730 --> 01:16:26.190
Coming back to Angular
running into limitations,

01:16:26.190 --> 01:16:29.910
I mean I haven't really
run into any major gotchas,

01:16:29.910 --> 01:16:32.370
except for the scope with
ng-repeat that I mentioned

01:16:32.370 --> 01:16:34.120
earlier.

01:16:34.120 --> 01:16:35.780
I'm sure there are other areas.

01:16:35.780 --> 01:16:40.857
I haven't fully exhausted
every possible combination

01:16:40.857 --> 01:16:41.940
of D3 and Angular, though.

01:16:41.940 --> 01:16:45.509
So there's probably
those gotchas out there

01:16:45.509 --> 01:16:46.800
that I have yet to come across.

01:16:46.800 --> 01:16:50.530
 

01:16:50.530 --> 01:16:55.480
AUDIENCE: I have a question
about-- here-- the question is

01:16:55.480 --> 01:17:01.770
about Angular is about
manipulating Dom structures,

01:17:01.770 --> 01:17:05.860
and D3 is also manipulating,
but it's inside SVG.

01:17:05.860 --> 01:17:10.100
Have you ever tried to use
Angular markups inside the SVG

01:17:10.100 --> 01:17:11.900
markup so that it
can directly driven

01:17:11.900 --> 01:17:17.515
by the binding or the
brackets inside SVG?

01:17:17.515 --> 01:17:18.890
VICTOR POWELL:
Well, first off, I

01:17:18.890 --> 01:17:22.120
want to clarify that D3 is
not only just for manipulating

01:17:22.120 --> 01:17:25.590
SVGs, even though that is
commonly used with SVG.

01:17:25.590 --> 01:17:28.159
To address your
second question, that

01:17:28.159 --> 01:17:29.950
was like the comment
that was asked earlier

01:17:29.950 --> 01:17:31.140
at the end of the talk.

01:17:31.140 --> 01:17:34.915
There are other ways of
creating data visualizations,

01:17:34.915 --> 01:17:36.290
but I think there
is always going

01:17:36.290 --> 01:17:38.930
to be at least some need
for D3 along the way.

01:17:38.930 --> 01:17:41.820
Maybe in the future, the
features that D3 provide

01:17:41.820 --> 01:17:46.457
wouldn't be in some monolithic
single framework as it is now.

01:17:46.457 --> 01:17:48.040
You can already do
this in some extent

01:17:48.040 --> 01:17:49.842
when you compile it on your own.

01:17:49.842 --> 01:17:52.050
You could pick out the
features you're interested in.

01:17:52.050 --> 01:17:54.930
But it does more than
just manipulating the Dom.

01:17:54.930 --> 01:17:56.920
It gives you a
whole suite of tools

01:17:56.920 --> 01:18:01.675
for manipulating data that are
useful in data visualizations.

01:18:01.675 --> 01:18:03.910
AUDIENCE: So That is
actually, it is possible

01:18:03.910 --> 01:18:07.860
directly using Angular to
manipulate the SVG Dom so

01:18:07.860 --> 01:18:11.440
that you can change based on
the data definition or data

01:18:11.440 --> 01:18:13.010
changes, right?

01:18:13.010 --> 01:18:14.410
VICTOR POWELL: I'm sorry.

01:18:14.410 --> 01:18:18.270
AUDIENCE: For example, I have
some paths, some rectangle

01:18:18.270 --> 01:18:22.250
defining the SVG markup, and
I have some of the property

01:18:22.250 --> 01:18:26.490
directly binded with
Angular's property,

01:18:26.490 --> 01:18:30.710
like brackets, using brackets
to bind with Angular property.

01:18:30.710 --> 01:18:35.820
So that when Angular's
property got changed,

01:18:35.820 --> 01:18:39.910
the value in the SVG's
definition got changed too,

01:18:39.910 --> 01:18:40.700
with it.

01:18:40.700 --> 01:18:42.562
So it is possible
to do that without--

01:18:42.562 --> 01:18:45.020
VICTOR POWELL: I think you just
answered your own question.

01:18:45.020 --> 01:18:48.120
 

01:18:48.120 --> 01:18:53.730
AUDIENCE: For example, I'm
defining kind of a path in SVG.

01:18:53.730 --> 01:18:56.750
We are providing
several coordinates

01:18:56.750 --> 01:19:02.220
in the D property of
the path's element.

01:19:02.220 --> 01:19:05.490
Without using D3,
are you directly

01:19:05.490 --> 01:19:10.210
referencing one property
from a scope of the Angular.

01:19:10.210 --> 01:19:14.750
So that when the property,
Angular's scope got changed,

01:19:14.750 --> 01:19:18.100
the paths got changed
in the SVG, too.

01:19:18.100 --> 01:19:21.880
So that it doesn't have
to actually use the D3

01:19:21.880 --> 01:19:30.400
to manipulate the
Dom without using--

01:19:30.400 --> 01:19:35.370
I mean in your presentation
you defined a directive,

01:19:35.370 --> 01:19:37.960
so do you watch the data change?

01:19:37.960 --> 01:19:41.990
And then using the
D30 enter exit update

01:19:41.990 --> 01:19:45.690
to actually update the SVG Dom.

01:19:45.690 --> 01:19:48.170
I don't use this part.

01:19:48.170 --> 01:19:52.030
I directly referencing
the data from the scope.

01:19:52.030 --> 01:20:01.472
 

01:20:01.472 --> 01:20:02.930
VICTOR POWELL: Can
you repeat that?

01:20:02.930 --> 01:20:04.680
BRAD GREEN: So he's
just asking if there's

01:20:04.680 --> 01:20:07.200
anything special
about the SVG element

01:20:07.200 --> 01:20:10.160
and the way it's rendered
that would prevent you

01:20:10.160 --> 01:20:12.474
from interplating an
Angular scope within that.

01:20:12.474 --> 01:20:13.390
VICTOR POWELL: Oh, OK.

01:20:13.390 --> 01:20:14.771
That's an easy question.

01:20:14.771 --> 01:20:15.270
No.

01:20:15.270 --> 01:20:17.760
Because the SVG
inside of the Dom

01:20:17.760 --> 01:20:20.910
is just like any
other Dom element.

01:20:20.910 --> 01:20:22.500
IGOR MINAR: We do
have tests that

01:20:22.500 --> 01:20:26.762
verify that the data binding
works with SVG notes.

01:20:26.762 --> 01:20:28.470
And if there are some
issues, then please

01:20:28.470 --> 01:20:31.830
file them with all the bugs, and
we definitely want to fix them.

01:20:31.830 --> 01:20:40.434
 

01:20:40.434 --> 01:20:42.620
AUDIENCE: I had
just a short idea

01:20:42.620 --> 01:20:45.585
that I can-- Is it common
to use this other thing

01:20:45.585 --> 01:20:48.330
with like streaming data?

01:20:48.330 --> 01:20:54.106
Saying if some backended
streams data to the front end

01:20:54.106 --> 01:20:54.730
to [INAUDIBLE].

01:20:54.730 --> 01:20:57.167
 

01:20:57.167 --> 01:20:59.250
VICTOR POWELL: You're
saying is that possible, or?

01:20:59.250 --> 01:20:59.830
AUDIENCE: No.

01:20:59.830 --> 01:21:02.957
If this is like a
common use case.

01:21:02.957 --> 01:21:03.790
VICTOR POWELL: Yeah.

01:21:03.790 --> 01:21:05.123
You could use it for doing that.

01:21:05.123 --> 01:21:07.652
If you do it the
way I described,

01:21:07.652 --> 01:21:09.110
the directive
shouldn't really care

01:21:09.110 --> 01:21:10.276
where it gets the data from.

01:21:10.276 --> 01:21:11.607
So it really shouldn't matter.

01:21:11.607 --> 01:21:13.940
You could have a service
that's pulling data dynamically

01:21:13.940 --> 01:21:16.015
from some API that
it's just updating.

01:21:16.015 --> 01:21:18.390
And then the controller would
be responsible for updating

01:21:18.390 --> 01:21:20.030
the data on the scope
and the directive

01:21:20.030 --> 01:21:21.321
will just update automatically.

01:21:21.321 --> 01:21:27.610
 

01:21:27.610 --> 01:21:29.900
You could put the web
sockets inside of a service

01:21:29.900 --> 01:21:33.470
or maybe there's already someone
might have already written

01:21:33.470 --> 01:21:35.090
something that does
that that allows

01:21:35.090 --> 01:21:38.286
Socket.IO to work in Angular.

01:21:38.286 --> 01:21:39.910
But I think the
directive really should

01:21:39.910 --> 01:21:41.659
have no opinion where
the data comes from.

01:21:41.659 --> 01:21:44.924
 

01:21:44.924 --> 01:21:46.840
AUDIENCE: Thanks, first
of all, for the talks.

01:21:46.840 --> 01:21:47.780
They were great.

01:21:47.780 --> 01:21:48.696
VICTOR POWELL: Thanks.

01:21:48.696 --> 01:21:50.490
AUDIENCE: My question's
about interceptors.

01:21:50.490 --> 01:21:52.890
So what are some other examples
where you would use it,

01:21:52.890 --> 01:21:55.722
besides the timing, either
execution to run your code?

01:21:55.722 --> 01:21:57.180
The first thing
that comes to mind,

01:21:57.180 --> 01:22:00.756
perhaps, is maybe
role-based access control.

01:22:00.756 --> 01:22:03.130
Would that be appropriate use
of interceptors in Angular?

01:22:03.130 --> 01:22:05.815
I'm very new to it, so I'm just
kind of curious as to what else

01:22:05.815 --> 01:22:06.689
you could do with it.

01:22:06.689 --> 01:22:07.480
BRIAN FORD: Sure.

01:22:07.480 --> 01:22:08.950
It was decorators is what--

01:22:08.950 --> 01:22:09.764
AUDIENCE: Right.

01:22:09.764 --> 01:22:10.680
BRIAN FORD: That's OK.

01:22:10.680 --> 01:22:12.790
But interceptor's actually a
good way of thinking about it.

01:22:12.790 --> 01:22:13.160
I like that.

01:22:13.160 --> 01:22:14.550
AUDIENCE: Sorry, I always con--

01:22:14.550 --> 01:22:16.030
IGOR MINAR: But we also
have interceptors--

01:22:16.030 --> 01:22:16.696
BRIAN FORD: Yes.

01:22:16.696 --> 01:22:18.440
But it's important,
because there also

01:22:18.440 --> 01:22:21.150
is this thing called
interceptors with HTTP

01:22:21.150 --> 01:22:25.420
so you can intercept responses
and incoming and outgoing.

01:22:25.420 --> 01:22:27.420
But it's important to
distinguish between those.

01:22:27.420 --> 01:22:33.230
So you probably wouldn't
use this sort of technique

01:22:33.230 --> 01:22:34.230
for something like that.

01:22:34.230 --> 01:22:38.030
You probably have
some custom service

01:22:38.030 --> 01:22:42.540
that you wrote that interacts
with your model data.

01:22:42.540 --> 01:22:44.740
But if you wanted
to, for instance,

01:22:44.740 --> 01:22:49.740
say I'm going to shut down all
HTTP requests across the board

01:22:49.740 --> 01:22:52.570
if a user doesn't have this
thing, like dollar HTTP doesn't

01:22:52.570 --> 01:22:55.080
have such an ability.

01:22:55.080 --> 01:22:57.100
But you could hack your
own little API onto it

01:22:57.100 --> 01:23:02.000
by saying give me
dollar HTTP, and we're

01:23:02.000 --> 01:23:05.580
going to change how it
works so that way it

01:23:05.580 --> 01:23:06.580
does something else.

01:23:06.580 --> 01:23:11.050
The idea is that you can
change existing services

01:23:11.050 --> 01:23:14.045
by kind of patching
their properties.

01:23:14.045 --> 01:23:14.670
AUDIENCE: Wait.

01:23:14.670 --> 01:23:18.390
Can't you use the HTTP backend
service, like you do in--

01:23:18.390 --> 01:23:21.180
BRIAN FORD: There are a lot
of ways you could do it.

01:23:21.180 --> 01:23:24.951
I was looking kind
of for an example.

01:23:24.951 --> 01:23:25.450
Yeah.

01:23:25.450 --> 01:23:27.700
But that, perhaps, might not
be the best way to do it.

01:23:27.700 --> 01:23:31.304
But yeah, certainly.

01:23:31.304 --> 01:23:32.720
IGOR MINAR: The
important thing is

01:23:32.720 --> 01:23:34.740
that whenever you
use decorators,

01:23:34.740 --> 01:23:37.930
ensure that the API
stays compatible.

01:23:37.930 --> 01:23:39.795
Because as soon as
you monkey patch

01:23:39.795 --> 01:23:42.550
the object in a way
that is not compatible,

01:23:42.550 --> 01:23:44.920
then you might run into
issues with components

01:23:44.920 --> 01:23:48.690
that expect whatever service
it is that you are monkey

01:23:48.690 --> 01:23:50.464
patching to behave
in originally.

01:23:50.464 --> 01:23:51.130
BRIAN FORD: Yes.

01:23:51.130 --> 01:23:52.546
It's a very powerful
tool, and you

01:23:52.546 --> 01:23:53.930
have to be
responsible and stuff.

01:23:53.930 --> 01:23:56.440
 

01:23:56.440 --> 01:23:58.700
VICTOR POWELL: I just wanted
to make one small point,

01:23:58.700 --> 01:24:00.752
especially with
role-based access control.

01:24:00.752 --> 01:24:02.210
You really don't
want to be relying

01:24:02.210 --> 01:24:06.227
on doing that on the
client to begin with.

01:24:06.227 --> 01:24:08.310
I think you mentioned that
a little bit, actually.

01:24:08.310 --> 01:24:20.710
 

01:24:20.710 --> 01:24:21.624
Fair enough.

01:24:21.624 --> 01:24:22.290
So, responsible.

01:24:22.290 --> 01:24:24.820
 

01:24:24.820 --> 01:24:27.490
AUDIENCE: So I'm interested
in the book you're

01:24:27.490 --> 01:24:29.640
writing with Ari
on D3 and Angular.

01:24:29.640 --> 01:24:33.454
Could you talk a
little more about what

01:24:33.454 --> 01:24:34.870
you find that's
interesting it it?

01:24:34.870 --> 01:24:36.920
You know, sell it, as it were.

01:24:36.920 --> 01:24:39.510
 

01:24:39.510 --> 01:24:44.270
VICTOR POWELL: Well, the
book isn't 100% done.

01:24:44.270 --> 01:24:48.660
Most of the book, as is, goes
through an instruction to D3

01:24:48.660 --> 01:24:51.070
and an introduction to Angular.

01:24:51.070 --> 01:24:53.040
But combining the
two hasn't been fully

01:24:53.040 --> 01:24:56.120
worked out in the book.

01:24:56.120 --> 01:24:59.460
But it should be very soon.

01:24:59.460 --> 01:25:02.315
Some of things it'll be going
over, I went over in the talk,

01:25:02.315 --> 01:25:03.940
or that will be going
over in the book,

01:25:03.940 --> 01:25:05.900
I went over in the talk.

01:25:05.900 --> 01:25:08.900
But I don't want to give
away all the secrets.

01:25:08.900 --> 01:25:11.291
 

